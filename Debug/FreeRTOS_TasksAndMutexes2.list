
FreeRTOS_TasksAndMutexes2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bfc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004d9c  08004d9c  00005d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e5c  08004e5c  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e5c  08004e5c  00005e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e64  08004e64  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e64  08004e64  00005e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e68  08004e68  00005e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004e6c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f4  20000060  08004ecc  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004254  08004ecc  00006254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145bd  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e89  00000000  00000000  0001a64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0001d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d92  00000000  00000000  0001e648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ff1  00000000  00000000  0001f3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d0d  00000000  00000000  000373cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c80  00000000  00000000  0004a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0d58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd8  00000000  00000000  000e0d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e5974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d84 	.word	0x08004d84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004d84 	.word	0x08004d84

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c
 800053c:	2000011c 	.word	0x2000011c

08000540 <main>:
void Thread1Func(void const * argument);
void Thread2Func(void const * argument);


int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b098      	sub	sp, #96	@ 0x60
 8000544:	af00      	add	r7, sp, #0


  HAL_Init();
 8000546:	f000 fb0f 	bl	8000b68 <HAL_Init>


  SystemClock_Config();
 800054a:	f000 f859 	bl	8000600 <SystemClock_Config>


  MX_GPIO_Init();
 800054e:	f000 f8eb 	bl	8000728 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f8bf 	bl	80006d4 <MX_USART2_UART_Init>

  osMutexDef(uart_mutex);
 8000556:	2300      	movs	r3, #0
 8000558:	65bb      	str	r3, [r7, #88]	@ 0x58
 800055a:	2300      	movs	r3, #0
 800055c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uart_mutexHandle = osMutexCreate(osMutex(uart_mutex));
 800055e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000562:	4618      	mov	r0, r3
 8000564:	f002 f985 	bl	8002872 <osMutexCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a1e      	ldr	r2, [pc, #120]	@ (80005e4 <main+0xa4>)
 800056c:	6013      	str	r3, [r2, #0]



  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800056e:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <main+0xa8>)
 8000570:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000582:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f002 f912 	bl	80027b2 <osThreadCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a16      	ldr	r2, [pc, #88]	@ (80005ec <main+0xac>)
 8000592:	6013      	str	r3, [r2, #0]

  /* definition and creation of Thread1 */
  osThreadDef(Thread1, Thread1Func, osPriorityNormal, 0, 128);
 8000594:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <main+0xb0>)
 8000596:	f107 0420 	add.w	r4, r7, #32
 800059a:	461d      	mov	r5, r3
 800059c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Thread1Handle = osThreadCreate(osThread(Thread1), NULL);
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 f8ff 	bl	80027b2 <osThreadCreate>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a0f      	ldr	r2, [pc, #60]	@ (80005f4 <main+0xb4>)
 80005b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Thread2 */
  osThreadDef(Thread2, Thread2Func, osPriorityNormal, 0, 128);
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <main+0xb8>)
 80005bc:	1d3c      	adds	r4, r7, #4
 80005be:	461d      	mov	r5, r3
 80005c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Thread2Handle = osThreadCreate(osThread(Thread2), NULL);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 f8ee 	bl	80027b2 <osThreadCreate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a08      	ldr	r2, [pc, #32]	@ (80005fc <main+0xbc>)
 80005da:	6013      	str	r3, [r2, #0]


  osKernelStart();
 80005dc:	f002 f8e2 	bl	80027a4 <osKernelStart>


  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0xa0>
 80005e4:	20000370 	.word	0x20000370
 80005e8:	08004da8 	.word	0x08004da8
 80005ec:	20000364 	.word	0x20000364
 80005f0:	08004dcc 	.word	0x08004dcc
 80005f4:	20000368 	.word	0x20000368
 80005f8:	08004df0 	.word	0x08004df0
 80005fc:	2000036c 	.word	0x2000036c

08000600 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	@ 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 fac8 	bl	8004ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	@ (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	@ (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000670:	2310      	movs	r3, #16
 8000672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000674:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067a:	2304      	movs	r3, #4
 800067c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067e:	2304      	movs	r3, #4
 8000680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fd30 	bl	80010ec <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000692:	f000 f911 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff92 	bl	80015dc <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006be:	f000 f8fb 	bl	80008b8 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	@ 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_USART2_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 800070c:	f001 fc26 	bl	8001f5c <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f8cf 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000031c 	.word	0x2000031c
 8000724:	40004400 	.word	0x40004400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <MX_GPIO_Init+0x98>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a1e      	ldr	r2, [pc, #120]	@ (80007c0 <MX_GPIO_Init+0x98>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <MX_GPIO_Init+0x98>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <MX_GPIO_Init+0x98>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a17      	ldr	r2, [pc, #92]	@ (80007c0 <MX_GPIO_Init+0x98>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <MX_GPIO_Init+0x98>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2120      	movs	r1, #32
 800077a:	4812      	ldr	r0, [pc, #72]	@ (80007c4 <MX_GPIO_Init+0x9c>)
 800077c:	f000 fc9c 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <MX_GPIO_Init+0xa0>)
 8000796:	f000 fb0b 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800079a:	2320      	movs	r3, #32
 800079c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_GPIO_Init+0x9c>)
 80007b2:	f000 fafd 	bl	8000db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020000 	.word	0x40020000
 80007c8:	40020800 	.word	0x40020800

080007cc <StartDefaultTask>:


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f002 f838 	bl	800284a <osDelay>
 80007da:	e7fb      	b.n	80007d4 <StartDefaultTask+0x8>

080007dc <Thread1Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread1Func */
void Thread1Func(void const * argument)
{
 80007dc:	b5b0      	push	{r4, r5, r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thread1Func */
  /* Infinite loop */
  uint8_t message[24] = "Greetings from Thread1\r\n";
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <Thread1Func+0x50>)
 80007e6:	f107 0408 	add.w	r4, r7, #8
 80007ea:	461d      	mov	r5, r3
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007f4:	e884 0003 	stmia.w	r4, {r0, r1}
  for(;;)
  {
	xSemaphoreTake(uart_mutexHandle,portMAX_DELAY);
 80007f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <Thread1Func+0x54>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fb93 	bl	8002f2c <xQueueSemaphoreTake>
	HAL_UART_Transmit(&huart2,message,24,10);
 8000806:	f107 0108 	add.w	r1, r7, #8
 800080a:	230a      	movs	r3, #10
 800080c:	2218      	movs	r2, #24
 800080e:	4809      	ldr	r0, [pc, #36]	@ (8000834 <Thread1Func+0x58>)
 8000810:	f001 fbf4 	bl	8001ffc <HAL_UART_Transmit>
	xSemaphoreGive(uart_mutexHandle);
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <Thread1Func+0x54>)
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	2300      	movs	r3, #0
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	f002 fa83 	bl	8002d28 <xQueueGenericSend>
    osDelay(10);
 8000822:	200a      	movs	r0, #10
 8000824:	f002 f811 	bl	800284a <osDelay>
	xSemaphoreTake(uart_mutexHandle,portMAX_DELAY);
 8000828:	bf00      	nop
 800082a:	e7e5      	b.n	80007f8 <Thread1Func+0x1c>
 800082c:	08004e0c 	.word	0x08004e0c
 8000830:	20000370 	.word	0x20000370
 8000834:	2000031c 	.word	0x2000031c

08000838 <Thread2Func>:
}


/* USER CODE END Header_Thread2Func */
void Thread2Func(void const * argument)
{
 8000838:	b5b0      	push	{r4, r5, r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thread2Func */
  /* Infinite loop */
	uint8_t message[24]="Greetings from Thread2\r\n";
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <Thread2Func+0x50>)
 8000842:	f107 0408 	add.w	r4, r7, #8
 8000846:	461d      	mov	r5, r3
 8000848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800084c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000850:	e884 0003 	stmia.w	r4, {r0, r1}

  for(;;)
  {
	xSemaphoreTake(uart_mutexHandle,portMAX_DELAY);
 8000854:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <Thread2Func+0x54>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800085c:	4618      	mov	r0, r3
 800085e:	f002 fb65 	bl	8002f2c <xQueueSemaphoreTake>
	HAL_UART_Transmit(&huart2,message,24,10);
 8000862:	f107 0108 	add.w	r1, r7, #8
 8000866:	230a      	movs	r3, #10
 8000868:	2218      	movs	r2, #24
 800086a:	4809      	ldr	r0, [pc, #36]	@ (8000890 <Thread2Func+0x58>)
 800086c:	f001 fbc6 	bl	8001ffc <HAL_UART_Transmit>
	xSemaphoreGive(uart_mutexHandle);
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <Thread2Func+0x54>)
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	2300      	movs	r3, #0
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	f002 fa55 	bl	8002d28 <xQueueGenericSend>
    osDelay(10);
 800087e:	200a      	movs	r0, #10
 8000880:	f001 ffe3 	bl	800284a <osDelay>
	xSemaphoreTake(uart_mutexHandle,portMAX_DELAY);
 8000884:	bf00      	nop
 8000886:	e7e5      	b.n	8000854 <Thread2Func+0x1c>
 8000888:	08004e24 	.word	0x08004e24
 800088c:	20000370 	.word	0x20000370
 8000890:	2000031c 	.word	0x2000031c

08000894 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d101      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008a6:	f000 f981 	bl	8000bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40000400 	.word	0x40000400

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_MspInit+0x54>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <HAL_MspInit+0x54>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_MspInit+0x54>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <HAL_MspInit+0x54>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	210f      	movs	r1, #15
 8000906:	f06f 0001 	mvn.w	r0, #1
 800090a:	f000 fa27 	bl	8000d5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	@ (80009a0 <HAL_UART_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12b      	bne.n	8000996 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a17      	ldr	r2, [pc, #92]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000976:	230c      	movs	r3, #12
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000986:	2307      	movs	r3, #7
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <HAL_UART_MspInit+0x8c>)
 8000992:	f000 fa0d 	bl	8000db0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	@ 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40004400 	.word	0x40004400
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	@ 0x38
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	4b33      	ldr	r3, [pc, #204]	@ (8000a90 <HAL_InitTick+0xe4>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c4:	4a32      	ldr	r2, [pc, #200]	@ (8000a90 <HAL_InitTick+0xe4>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80009cc:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <HAL_InitTick+0xe4>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d8:	f107 0210 	add.w	r2, r7, #16
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 f81a 	bl	8001a1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d103      	bne.n	80009fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009f2:	f000 ffeb 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
 80009f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80009f8:	e004      	b.n	8000a04 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009fa:	f000 ffe7 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
 80009fe:	4603      	mov	r3, r0
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a06:	4a23      	ldr	r2, [pc, #140]	@ (8000a94 <HAL_InitTick+0xe8>)
 8000a08:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0c:	0c9b      	lsrs	r3, r3, #18
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000a12:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a14:	4a21      	ldr	r2, [pc, #132]	@ (8000a9c <HAL_InitTick+0xf0>)
 8000a16:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a1e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000a20:	4a1d      	ldr	r2, [pc, #116]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a24:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000a38:	4817      	ldr	r0, [pc, #92]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a3a:	f001 f821 	bl	8001a80 <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d11b      	bne.n	8000a84 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000a4c:	4812      	ldr	r0, [pc, #72]	@ (8000a98 <HAL_InitTick+0xec>)
 8000a4e:	f001 f871 	bl	8001b34 <HAL_TIM_Base_Start_IT>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d111      	bne.n	8000a84 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a60:	201d      	movs	r0, #29
 8000a62:	f000 f997 	bl	8000d94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d808      	bhi.n	8000a7e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	201d      	movs	r0, #29
 8000a72:	f000 f973 	bl	8000d5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a76:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <HAL_InitTick+0xf4>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	e002      	b.n	8000a84 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3738      	adds	r7, #56	@ 0x38
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	431bde83 	.word	0x431bde83
 8000a98:	20000374 	.word	0x20000374
 8000a9c:	40000400 	.word	0x40000400
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ae0:	4802      	ldr	r0, [pc, #8]	@ (8000aec <TIM3_IRQHandler+0x10>)
 8000ae2:	f001 f889 	bl	8001bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000374 	.word	0x20000374

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	@ (8000b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	@ (8000b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f004 f837 	bl	8004bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fcfb 	bl	8000540 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b58:	08004e6c 	.word	0x08004e6c
  ldr r2, =_sbss
 8000b5c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b60:	20004254 	.word	0x20004254

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f8d8 	bl	8000d46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f7ff ff08 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fe92 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	200003bc 	.word	0x200003bc

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200003bc 	.word	0x200003bc

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4907      	ldr	r1, [pc, #28]	@ (8000c88 <__NVIC_EnableIRQ+0x38>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	@ (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	@ 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	@ 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff4c 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6e:	f7ff ff61 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	6978      	ldr	r0, [r7, #20]
 8000d7a:	f7ff ffb1 	bl	8000ce0 <NVIC_EncodePriority>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff80 	bl	8000c8c <__NVIC_SetPriority>
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff54 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	@ 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e159      	b.n	8001080 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f040 8148 	bne.w	800107a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d005      	beq.n	8000e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d130      	bne.n	8000e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f003 0201 	and.w	r2, r3, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d017      	beq.n	8000ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d123      	bne.n	8000ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0203 	and.w	r2, r3, #3
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80a2 	beq.w	800107a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b57      	ldr	r3, [pc, #348]	@ (8001098 <HAL_GPIO_Init+0x2e8>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a56      	ldr	r2, [pc, #344]	@ (8001098 <HAL_GPIO_Init+0x2e8>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b54      	ldr	r3, [pc, #336]	@ (8001098 <HAL_GPIO_Init+0x2e8>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f52:	4a52      	ldr	r2, [pc, #328]	@ (800109c <HAL_GPIO_Init+0x2ec>)
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a49      	ldr	r2, [pc, #292]	@ (80010a0 <HAL_GPIO_Init+0x2f0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d019      	beq.n	8000fb2 <HAL_GPIO_Init+0x202>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a48      	ldr	r2, [pc, #288]	@ (80010a4 <HAL_GPIO_Init+0x2f4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x1fe>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a47      	ldr	r2, [pc, #284]	@ (80010a8 <HAL_GPIO_Init+0x2f8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x1fa>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a46      	ldr	r2, [pc, #280]	@ (80010ac <HAL_GPIO_Init+0x2fc>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x1f6>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a45      	ldr	r2, [pc, #276]	@ (80010b0 <HAL_GPIO_Init+0x300>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x1f2>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e008      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	f002 0203 	and.w	r2, r2, #3
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	4935      	ldr	r1, [pc, #212]	@ (800109c <HAL_GPIO_Init+0x2ec>)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b38      	ldr	r3, [pc, #224]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff6:	4a2f      	ldr	r2, [pc, #188]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001020:	4a24      	ldr	r2, [pc, #144]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001026:	4b23      	ldr	r3, [pc, #140]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104a:	4a1a      	ldr	r2, [pc, #104]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001074:	4a0f      	ldr	r2, [pc, #60]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	f67f aea2 	bls.w	8000dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40013800 	.word	0x40013800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e267      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d075      	beq.n	80011f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800110a:	4b88      	ldr	r3, [pc, #544]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b04      	cmp	r3, #4
 8001114:	d00c      	beq.n	8001130 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001116:	4b85      	ldr	r3, [pc, #532]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800111e:	2b08      	cmp	r3, #8
 8001120:	d112      	bne.n	8001148 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001122:	4b82      	ldr	r3, [pc, #520]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800112a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800112e:	d10b      	bne.n	8001148 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	4b7e      	ldr	r3, [pc, #504]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d05b      	beq.n	80011f4 <HAL_RCC_OscConfig+0x108>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d157      	bne.n	80011f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e242      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001150:	d106      	bne.n	8001160 <HAL_RCC_OscConfig+0x74>
 8001152:	4b76      	ldr	r3, [pc, #472]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a75      	ldr	r2, [pc, #468]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e01d      	b.n	800119c <HAL_RCC_OscConfig+0xb0>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x98>
 800116a:	4b70      	ldr	r3, [pc, #448]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a6f      	ldr	r2, [pc, #444]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b6d      	ldr	r3, [pc, #436]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6c      	ldr	r2, [pc, #432]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0xb0>
 8001184:	4b69      	ldr	r3, [pc, #420]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a68      	ldr	r2, [pc, #416]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800118a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b66      	ldr	r3, [pc, #408]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a65      	ldr	r2, [pc, #404]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800119a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fd16 	bl	8000bd4 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fd12 	bl	8000bd4 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	@ 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e207      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	4b5b      	ldr	r3, [pc, #364]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0xc0>
 80011ca:	e014      	b.n	80011f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fd02 	bl	8000bd4 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fcfe 	bl	8000bd4 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	@ 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e1f3      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	4b51      	ldr	r3, [pc, #324]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0xe8>
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d063      	beq.n	80012ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001202:	4b4a      	ldr	r3, [pc, #296]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00b      	beq.n	8001226 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120e:	4b47      	ldr	r3, [pc, #284]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001216:	2b08      	cmp	r3, #8
 8001218:	d11c      	bne.n	8001254 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121a:	4b44      	ldr	r3, [pc, #272]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d116      	bne.n	8001254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	4b41      	ldr	r3, [pc, #260]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <HAL_RCC_OscConfig+0x152>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d001      	beq.n	800123e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e1c7      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123e:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4937      	ldr	r1, [pc, #220]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001252:	e03a      	b.n	80012ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125c:	4b34      	ldr	r3, [pc, #208]	@ (8001330 <HAL_RCC_OscConfig+0x244>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001262:	f7ff fcb7 	bl	8000bd4 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fcb3 	bl	8000bd4 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e1a8      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b28      	ldr	r3, [pc, #160]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4925      	ldr	r1, [pc, #148]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001298:	4313      	orrs	r3, r2
 800129a:	600b      	str	r3, [r1, #0]
 800129c:	e015      	b.n	80012ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129e:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <HAL_RCC_OscConfig+0x244>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fc96 	bl	8000bd4 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc92 	bl	8000bd4 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e187      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d036      	beq.n	8001344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d016      	beq.n	800130c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_RCC_OscConfig+0x248>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e4:	f7ff fc76 	bl	8000bd4 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff fc72 	bl	8000bd4 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e167      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_RCC_OscConfig+0x240>)
 8001300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x200>
 800130a:	e01b      	b.n	8001344 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130c:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <HAL_RCC_OscConfig+0x248>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fc5f 	bl	8000bd4 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	e00e      	b.n	8001338 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff fc5b 	bl	8000bd4 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d907      	bls.n	8001338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e150      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
 800132c:	40023800 	.word	0x40023800
 8001330:	42470000 	.word	0x42470000
 8001334:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001338:	4b88      	ldr	r3, [pc, #544]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800133a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1ea      	bne.n	800131a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8097 	beq.w	8001480 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001356:	4b81      	ldr	r3, [pc, #516]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b7d      	ldr	r3, [pc, #500]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	4a7c      	ldr	r2, [pc, #496]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	@ 0x40
 8001372:	4b7a      	ldr	r3, [pc, #488]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800137e:	2301      	movs	r3, #1
 8001380:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001382:	4b77      	ldr	r3, [pc, #476]	@ (8001560 <HAL_RCC_OscConfig+0x474>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138a:	2b00      	cmp	r3, #0
 800138c:	d118      	bne.n	80013c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138e:	4b74      	ldr	r3, [pc, #464]	@ (8001560 <HAL_RCC_OscConfig+0x474>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a73      	ldr	r2, [pc, #460]	@ (8001560 <HAL_RCC_OscConfig+0x474>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139a:	f7ff fc1b 	bl	8000bd4 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a2:	f7ff fc17 	bl	8000bd4 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e10c      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001560 <HAL_RCC_OscConfig+0x474>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2ea>
 80013c8:	4b64      	ldr	r3, [pc, #400]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013cc:	4a63      	ldr	r2, [pc, #396]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d4:	e01c      	b.n	8001410 <HAL_RCC_OscConfig+0x324>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b05      	cmp	r3, #5
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x30c>
 80013de:	4b5f      	ldr	r3, [pc, #380]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e2:	4a5e      	ldr	r2, [pc, #376]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ea:	4b5c      	ldr	r3, [pc, #368]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ee:	4a5b      	ldr	r2, [pc, #364]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013f6:	e00b      	b.n	8001410 <HAL_RCC_OscConfig+0x324>
 80013f8:	4b58      	ldr	r3, [pc, #352]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fc:	4a57      	ldr	r2, [pc, #348]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80013fe:	f023 0301 	bic.w	r3, r3, #1
 8001402:	6713      	str	r3, [r2, #112]	@ 0x70
 8001404:	4b55      	ldr	r3, [pc, #340]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001408:	4a54      	ldr	r2, [pc, #336]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800140a:	f023 0304 	bic.w	r3, r3, #4
 800140e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d015      	beq.n	8001444 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff fbdc 	bl	8000bd4 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141e:	e00a      	b.n	8001436 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fbd8 	bl	8000bd4 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0cb      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001436:	4b49      	ldr	r3, [pc, #292]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0ee      	beq.n	8001420 <HAL_RCC_OscConfig+0x334>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff fbc6 	bl	8000bd4 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff fbc2 	bl	8000bd4 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0b5      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001462:	4b3e      	ldr	r3, [pc, #248]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1ee      	bne.n	800144c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001474:	4b39      	ldr	r3, [pc, #228]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a38      	ldr	r2, [pc, #224]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800147a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80a1 	beq.w	80015cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800148a:	4b34      	ldr	r3, [pc, #208]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d05c      	beq.n	8001550 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d141      	bne.n	8001522 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b31      	ldr	r3, [pc, #196]	@ (8001564 <HAL_RCC_OscConfig+0x478>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb96 	bl	8000bd4 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fb92 	bl	8000bd4 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e087      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	4b27      	ldr	r3, [pc, #156]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69da      	ldr	r2, [r3, #28]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	3b01      	subs	r3, #1
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ec:	061b      	lsls	r3, r3, #24
 80014ee:	491b      	ldr	r1, [pc, #108]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_RCC_OscConfig+0x478>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fb6b 	bl	8000bd4 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff fb67 	bl	8000bd4 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e05c      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x416>
 8001520:	e054      	b.n	80015cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_RCC_OscConfig+0x478>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fb54 	bl	8000bd4 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fb50 	bl	8000bd4 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e045      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_RCC_OscConfig+0x470>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x444>
 800154e:	e03d      	b.n	80015cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d107      	bne.n	8001568 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e038      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000
 8001564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_RCC_OscConfig+0x4ec>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d028      	beq.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001580:	429a      	cmp	r2, r3
 8001582:	d121      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d11a      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001598:	4013      	ands	r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800159e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d111      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	3b01      	subs	r3, #1
 80015b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d107      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0cc      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f0:	4b68      	ldr	r3, [pc, #416]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d90c      	bls.n	8001618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b65      	ldr	r3, [pc, #404]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b63      	ldr	r3, [pc, #396]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0b8      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001630:	4b59      	ldr	r3, [pc, #356]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800163a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001648:	4b53      	ldr	r3, [pc, #332]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	4a52      	ldr	r2, [pc, #328]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001654:	4b50      	ldr	r3, [pc, #320]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	494d      	ldr	r1, [pc, #308]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d044      	beq.n	80016fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b47      	ldr	r3, [pc, #284]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d119      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e07f      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d003      	beq.n	800169a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001696:	2b03      	cmp	r3, #3
 8001698:	d107      	bne.n	80016aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169a:	4b3f      	ldr	r3, [pc, #252]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e06f      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e067      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ba:	4b37      	ldr	r3, [pc, #220]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f023 0203 	bic.w	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4934      	ldr	r1, [pc, #208]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016cc:	f7ff fa82 	bl	8000bd4 <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d4:	f7ff fa7e 	bl	8000bd4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e04f      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 020c 	and.w	r2, r3, #12
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d1eb      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016fc:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d20c      	bcs.n	8001724 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e032      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4916      	ldr	r1, [pc, #88]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	490e      	ldr	r1, [pc, #56]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001762:	f000 f821 	bl	80017a8 <HAL_RCC_GetSysClockFreq>
 8001766:	4602      	mov	r2, r0
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	490a      	ldr	r1, [pc, #40]	@ (800179c <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	5ccb      	ldrb	r3, [r1, r3]
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	4a09      	ldr	r2, [pc, #36]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff f912 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023c00 	.word	0x40023c00
 8001798:	40023800 	.word	0x40023800
 800179c:	08004e44 	.word	0x08004e44
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017ac:	b094      	sub	sp, #80	@ 0x50
 80017ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c0:	4b79      	ldr	r3, [pc, #484]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d00d      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x40>
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	f200 80e1 	bhi.w	8001994 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x34>
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017da:	e0db      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4b73      	ldr	r3, [pc, #460]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x204>)
 80017de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017e0:	e0db      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e2:	4b73      	ldr	r3, [pc, #460]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80017e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017e6:	e0d8      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e8:	4b6f      	ldr	r3, [pc, #444]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f2:	4b6d      	ldr	r3, [pc, #436]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d063      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fe:	4b6a      	ldr	r3, [pc, #424]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	099b      	lsrs	r3, r3, #6
 8001804:	2200      	movs	r2, #0
 8001806:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001808:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800180a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800180c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
 8001816:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800181a:	4622      	mov	r2, r4
 800181c:	462b      	mov	r3, r5
 800181e:	f04f 0000 	mov.w	r0, #0
 8001822:	f04f 0100 	mov.w	r1, #0
 8001826:	0159      	lsls	r1, r3, #5
 8001828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800182c:	0150      	lsls	r0, r2, #5
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4621      	mov	r1, r4
 8001834:	1a51      	subs	r1, r2, r1
 8001836:	6139      	str	r1, [r7, #16]
 8001838:	4629      	mov	r1, r5
 800183a:	eb63 0301 	sbc.w	r3, r3, r1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800184c:	4659      	mov	r1, fp
 800184e:	018b      	lsls	r3, r1, #6
 8001850:	4651      	mov	r1, sl
 8001852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001856:	4651      	mov	r1, sl
 8001858:	018a      	lsls	r2, r1, #6
 800185a:	4651      	mov	r1, sl
 800185c:	ebb2 0801 	subs.w	r8, r2, r1
 8001860:	4659      	mov	r1, fp
 8001862:	eb63 0901 	sbc.w	r9, r3, r1
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800187a:	4690      	mov	r8, r2
 800187c:	4699      	mov	r9, r3
 800187e:	4623      	mov	r3, r4
 8001880:	eb18 0303 	adds.w	r3, r8, r3
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	462b      	mov	r3, r5
 8001888:	eb49 0303 	adc.w	r3, r9, r3
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800189a:	4629      	mov	r1, r5
 800189c:	024b      	lsls	r3, r1, #9
 800189e:	4621      	mov	r1, r4
 80018a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018a4:	4621      	mov	r1, r4
 80018a6:	024a      	lsls	r2, r1, #9
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ae:	2200      	movs	r2, #0
 80018b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018b8:	f7fe fc92 	bl	80001e0 <__aeabi_uldivmod>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4613      	mov	r3, r2
 80018c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018c4:	e058      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c6:	4b38      	ldr	r3, [pc, #224]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	099b      	lsrs	r3, r3, #6
 80018cc:	2200      	movs	r2, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	4611      	mov	r1, r2
 80018d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018d6:	623b      	str	r3, [r7, #32]
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
 80018dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018e0:	4642      	mov	r2, r8
 80018e2:	464b      	mov	r3, r9
 80018e4:	f04f 0000 	mov.w	r0, #0
 80018e8:	f04f 0100 	mov.w	r1, #0
 80018ec:	0159      	lsls	r1, r3, #5
 80018ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f2:	0150      	lsls	r0, r2, #5
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4641      	mov	r1, r8
 80018fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80018fe:	4649      	mov	r1, r9
 8001900:	eb63 0b01 	sbc.w	fp, r3, r1
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001910:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001914:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001918:	ebb2 040a 	subs.w	r4, r2, sl
 800191c:	eb63 050b 	sbc.w	r5, r3, fp
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	00eb      	lsls	r3, r5, #3
 800192a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800192e:	00e2      	lsls	r2, r4, #3
 8001930:	4614      	mov	r4, r2
 8001932:	461d      	mov	r5, r3
 8001934:	4643      	mov	r3, r8
 8001936:	18e3      	adds	r3, r4, r3
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	464b      	mov	r3, r9
 800193c:	eb45 0303 	adc.w	r3, r5, r3
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800194e:	4629      	mov	r1, r5
 8001950:	028b      	lsls	r3, r1, #10
 8001952:	4621      	mov	r1, r4
 8001954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001958:	4621      	mov	r1, r4
 800195a:	028a      	lsls	r2, r1, #10
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001962:	2200      	movs	r2, #0
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	61fa      	str	r2, [r7, #28]
 8001968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800196c:	f7fe fc38 	bl	80001e0 <__aeabi_uldivmod>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4613      	mov	r3, r2
 8001976:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	0c1b      	lsrs	r3, r3, #16
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	3301      	adds	r3, #1
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001988:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800198a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001992:	e002      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x204>)
 8001996:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800199c:	4618      	mov	r0, r3
 800199e:	3750      	adds	r7, #80	@ 0x50
 80019a0:	46bd      	mov	sp, r7
 80019a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	00f42400 	.word	0x00f42400
 80019b0:	007a1200 	.word	0x007a1200

080019b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000000 	.word	0x20000000

080019cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019d0:	f7ff fff0 	bl	80019b4 <HAL_RCC_GetHCLKFreq>
 80019d4:	4602      	mov	r2, r0
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	0a9b      	lsrs	r3, r3, #10
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	4903      	ldr	r1, [pc, #12]	@ (80019f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019e2:	5ccb      	ldrb	r3, [r1, r3]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40023800 	.word	0x40023800
 80019f0:	08004e54 	.word	0x08004e54

080019f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019f8:	f7ff ffdc 	bl	80019b4 <HAL_RCC_GetHCLKFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	0b5b      	lsrs	r3, r3, #13
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	4903      	ldr	r1, [pc, #12]	@ (8001a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	08004e54 	.word	0x08004e54

08001a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	220f      	movs	r2, #15
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0203 	and.w	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a50:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a5e:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <HAL_RCC_GetClockConfig+0x60>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0207 	and.w	r2, r3, #7
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	601a      	str	r2, [r3, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40023c00 	.word	0x40023c00

08001a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e041      	b.n	8001b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f839 	bl	8001b1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3304      	adds	r3, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f000 f9b2 	bl	8001e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d001      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e044      	b.n	8001bd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1e      	ldr	r2, [pc, #120]	@ (8001be4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d018      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b76:	d013      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001be8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00e      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a19      	ldr	r2, [pc, #100]	@ (8001bec <HAL_TIM_Base_Start_IT+0xb8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d009      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a17      	ldr	r2, [pc, #92]	@ (8001bf0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d004      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a16      	ldr	r2, [pc, #88]	@ (8001bf4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d111      	bne.n	8001bc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d010      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc2:	e007      	b.n	8001bd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40000400 	.word	0x40000400
 8001bec:	40000800 	.word	0x40000800
 8001bf0:	40000c00 	.word	0x40000c00
 8001bf4:	40014000 	.word	0x40014000

08001bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d020      	beq.n	8001c5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01b      	beq.n	8001c5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0202 	mvn.w	r2, #2
 8001c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8d2 	bl	8001dec <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8c4 	bl	8001dd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8d5 	bl	8001e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d020      	beq.n	8001ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01b      	beq.n	8001ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0204 	mvn.w	r2, #4
 8001c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8ac 	bl	8001dec <HAL_TIM_IC_CaptureCallback>
 8001c94:	e005      	b.n	8001ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f89e 	bl	8001dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f8af 	bl	8001e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d020      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01b      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0208 	mvn.w	r2, #8
 8001cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f886 	bl	8001dec <HAL_TIM_IC_CaptureCallback>
 8001ce0:	e005      	b.n	8001cee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f878 	bl	8001dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f889 	bl	8001e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d020      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01b      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0210 	mvn.w	r2, #16
 8001d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2208      	movs	r2, #8
 8001d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f860 	bl	8001dec <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f852 	bl	8001dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f863 	bl	8001e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00c      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0201 	mvn.w	r2, #1
 8001d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe fd98 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00c      	beq.n	8001d88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8e0 	bl	8001f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00c      	beq.n	8001dac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f834 	bl	8001e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0220 	mvn.w	r2, #32
 8001dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8b2 	bl	8001f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a37      	ldr	r2, [pc, #220]	@ (8001f18 <TIM_Base_SetConfig+0xf0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00f      	beq.n	8001e60 <TIM_Base_SetConfig+0x38>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e46:	d00b      	beq.n	8001e60 <TIM_Base_SetConfig+0x38>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a34      	ldr	r2, [pc, #208]	@ (8001f1c <TIM_Base_SetConfig+0xf4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <TIM_Base_SetConfig+0x38>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a33      	ldr	r2, [pc, #204]	@ (8001f20 <TIM_Base_SetConfig+0xf8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <TIM_Base_SetConfig+0x38>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a32      	ldr	r2, [pc, #200]	@ (8001f24 <TIM_Base_SetConfig+0xfc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a28      	ldr	r2, [pc, #160]	@ (8001f18 <TIM_Base_SetConfig+0xf0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01b      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e80:	d017      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a25      	ldr	r2, [pc, #148]	@ (8001f1c <TIM_Base_SetConfig+0xf4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a24      	ldr	r2, [pc, #144]	@ (8001f20 <TIM_Base_SetConfig+0xf8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00f      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a23      	ldr	r2, [pc, #140]	@ (8001f24 <TIM_Base_SetConfig+0xfc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00b      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a22      	ldr	r2, [pc, #136]	@ (8001f28 <TIM_Base_SetConfig+0x100>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a21      	ldr	r2, [pc, #132]	@ (8001f2c <TIM_Base_SetConfig+0x104>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d003      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a20      	ldr	r2, [pc, #128]	@ (8001f30 <TIM_Base_SetConfig+0x108>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d108      	bne.n	8001ec4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f18 <TIM_Base_SetConfig+0xf0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d103      	bne.n	8001ef2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f043 0204 	orr.w	r2, r3, #4
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	601a      	str	r2, [r3, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	40000800 	.word	0x40000800
 8001f24:	40000c00 	.word	0x40000c00
 8001f28:	40014000 	.word	0x40014000
 8001f2c:	40014400 	.word	0x40014400
 8001f30:	40014800 	.word	0x40014800

08001f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e042      	b.n	8001ff4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe fcca 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2224      	movs	r2, #36	@ 0x24
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f973 	bl	800228c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	@ 0x28
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b20      	cmp	r3, #32
 800201a:	d175      	bne.n	8002108 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_UART_Transmit+0x2c>
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e06e      	b.n	800210a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2221      	movs	r2, #33	@ 0x21
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800203a:	f7fe fdcb 	bl	8000bd4 <HAL_GetTick>
 800203e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	88fa      	ldrh	r2, [r7, #6]
 8002044:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	88fa      	ldrh	r2, [r7, #6]
 800204a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002054:	d108      	bne.n	8002068 <HAL_UART_Transmit+0x6c>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d104      	bne.n	8002068 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	e003      	b.n	8002070 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002070:	e02e      	b.n	80020d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2200      	movs	r2, #0
 800207a:	2180      	movs	r1, #128	@ 0x80
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f848 	bl	8002112 <UART_WaitOnFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e03a      	b.n	800210a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	3302      	adds	r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	e007      	b.n	80020c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	781a      	ldrb	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	3301      	adds	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1cb      	bne.n	8002072 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2200      	movs	r2, #0
 80020e2:	2140      	movs	r1, #64	@ 0x40
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f814 	bl	8002112 <UART_WaitOnFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e006      	b.n	800210a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	e000      	b.n	800210a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002108:	2302      	movs	r3, #2
  }
}
 800210a:	4618      	mov	r0, r3
 800210c:	3720      	adds	r7, #32
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002122:	e03b      	b.n	800219c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800212a:	d037      	beq.n	800219c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212c:	f7fe fd52 	bl	8000bd4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	6a3a      	ldr	r2, [r7, #32]
 8002138:	429a      	cmp	r2, r3
 800213a:	d302      	bcc.n	8002142 <UART_WaitOnFlagUntilTimeout+0x30>
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e03a      	b.n	80021bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d023      	beq.n	800219c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b80      	cmp	r3, #128	@ 0x80
 8002158:	d020      	beq.n	800219c <UART_WaitOnFlagUntilTimeout+0x8a>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b40      	cmp	r3, #64	@ 0x40
 800215e:	d01d      	beq.n	800219c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b08      	cmp	r3, #8
 800216c:	d116      	bne.n	800219c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f81d 	bl	80021c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2208      	movs	r2, #8
 800218e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e00f      	b.n	80021bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4013      	ands	r3, r2
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d0b4      	beq.n	8002124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b095      	sub	sp, #84	@ 0x54
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	330c      	adds	r3, #12
 80021d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d6:	e853 3f00 	ldrex	r3, [r3]
 80021da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80021dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80021e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	330c      	adds	r3, #12
 80021ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80021ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80021f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021f4:	e841 2300 	strex	r3, r2, [r1]
 80021f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80021fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1e5      	bne.n	80021cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3314      	adds	r3, #20
 8002206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	e853 3f00 	ldrex	r3, [r3]
 800220e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3314      	adds	r3, #20
 800221e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002220:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002222:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002228:	e841 2300 	strex	r3, r2, [r1]
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1e5      	bne.n	8002200 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002238:	2b01      	cmp	r3, #1
 800223a:	d119      	bne.n	8002270 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	330c      	adds	r3, #12
 8002242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	e853 3f00 	ldrex	r3, [r3]
 800224a:	60bb      	str	r3, [r7, #8]
   return(result);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f023 0310 	bic.w	r3, r3, #16
 8002252:	647b      	str	r3, [r7, #68]	@ 0x44
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	330c      	adds	r3, #12
 800225a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800225c:	61ba      	str	r2, [r7, #24]
 800225e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002260:	6979      	ldr	r1, [r7, #20]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	e841 2300 	strex	r3, r2, [r1]
 8002268:	613b      	str	r3, [r7, #16]
   return(result);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e5      	bne.n	800223c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800227e:	bf00      	nop
 8002280:	3754      	adds	r7, #84	@ 0x54
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800228c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002290:	b0c0      	sub	sp, #256	@ 0x100
 8002292:	af00      	add	r7, sp, #0
 8002294:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80022a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a8:	68d9      	ldr	r1, [r3, #12]
 80022aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	ea40 0301 	orr.w	r3, r0, r1
 80022b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80022e4:	f021 010c 	bic.w	r1, r1, #12
 80022e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80022f2:	430b      	orrs	r3, r1
 80022f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002306:	6999      	ldr	r1, [r3, #24]
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	ea40 0301 	orr.w	r3, r0, r1
 8002312:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b8f      	ldr	r3, [pc, #572]	@ (8002558 <UART_SetConfig+0x2cc>)
 800231c:	429a      	cmp	r2, r3
 800231e:	d005      	beq.n	800232c <UART_SetConfig+0xa0>
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b8d      	ldr	r3, [pc, #564]	@ (800255c <UART_SetConfig+0x2d0>)
 8002328:	429a      	cmp	r2, r3
 800232a:	d104      	bne.n	8002336 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800232c:	f7ff fb62 	bl	80019f4 <HAL_RCC_GetPCLK2Freq>
 8002330:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002334:	e003      	b.n	800233e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002336:	f7ff fb49 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
 800233a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800233e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002348:	f040 810c 	bne.w	8002564 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800234c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002350:	2200      	movs	r2, #0
 8002352:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002356:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800235a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800235e:	4622      	mov	r2, r4
 8002360:	462b      	mov	r3, r5
 8002362:	1891      	adds	r1, r2, r2
 8002364:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002366:	415b      	adcs	r3, r3
 8002368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800236a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800236e:	4621      	mov	r1, r4
 8002370:	eb12 0801 	adds.w	r8, r2, r1
 8002374:	4629      	mov	r1, r5
 8002376:	eb43 0901 	adc.w	r9, r3, r1
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800238a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800238e:	4690      	mov	r8, r2
 8002390:	4699      	mov	r9, r3
 8002392:	4623      	mov	r3, r4
 8002394:	eb18 0303 	adds.w	r3, r8, r3
 8002398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800239c:	462b      	mov	r3, r5
 800239e:	eb49 0303 	adc.w	r3, r9, r3
 80023a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80023b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80023b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80023ba:	460b      	mov	r3, r1
 80023bc:	18db      	adds	r3, r3, r3
 80023be:	653b      	str	r3, [r7, #80]	@ 0x50
 80023c0:	4613      	mov	r3, r2
 80023c2:	eb42 0303 	adc.w	r3, r2, r3
 80023c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80023c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80023cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80023d0:	f7fd ff06 	bl	80001e0 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4b61      	ldr	r3, [pc, #388]	@ (8002560 <UART_SetConfig+0x2d4>)
 80023da:	fba3 2302 	umull	r2, r3, r3, r2
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	011c      	lsls	r4, r3, #4
 80023e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023e6:	2200      	movs	r2, #0
 80023e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80023f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80023f4:	4642      	mov	r2, r8
 80023f6:	464b      	mov	r3, r9
 80023f8:	1891      	adds	r1, r2, r2
 80023fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80023fc:	415b      	adcs	r3, r3
 80023fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002400:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002404:	4641      	mov	r1, r8
 8002406:	eb12 0a01 	adds.w	sl, r2, r1
 800240a:	4649      	mov	r1, r9
 800240c:	eb43 0b01 	adc.w	fp, r3, r1
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800241c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002424:	4692      	mov	sl, r2
 8002426:	469b      	mov	fp, r3
 8002428:	4643      	mov	r3, r8
 800242a:	eb1a 0303 	adds.w	r3, sl, r3
 800242e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002432:	464b      	mov	r3, r9
 8002434:	eb4b 0303 	adc.w	r3, fp, r3
 8002438:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002448:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800244c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002450:	460b      	mov	r3, r1
 8002452:	18db      	adds	r3, r3, r3
 8002454:	643b      	str	r3, [r7, #64]	@ 0x40
 8002456:	4613      	mov	r3, r2
 8002458:	eb42 0303 	adc.w	r3, r2, r3
 800245c:	647b      	str	r3, [r7, #68]	@ 0x44
 800245e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002462:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002466:	f7fd febb 	bl	80001e0 <__aeabi_uldivmod>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4611      	mov	r1, r2
 8002470:	4b3b      	ldr	r3, [pc, #236]	@ (8002560 <UART_SetConfig+0x2d4>)
 8002472:	fba3 2301 	umull	r2, r3, r3, r1
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2264      	movs	r2, #100	@ 0x64
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	1acb      	subs	r3, r1, r3
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002486:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <UART_SetConfig+0x2d4>)
 8002488:	fba3 2302 	umull	r2, r3, r3, r2
 800248c:	095b      	lsrs	r3, r3, #5
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002494:	441c      	add	r4, r3
 8002496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800249a:	2200      	movs	r2, #0
 800249c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80024a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80024a8:	4642      	mov	r2, r8
 80024aa:	464b      	mov	r3, r9
 80024ac:	1891      	adds	r1, r2, r2
 80024ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024b0:	415b      	adcs	r3, r3
 80024b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024b8:	4641      	mov	r1, r8
 80024ba:	1851      	adds	r1, r2, r1
 80024bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80024be:	4649      	mov	r1, r9
 80024c0:	414b      	adcs	r3, r1
 80024c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80024d0:	4659      	mov	r1, fp
 80024d2:	00cb      	lsls	r3, r1, #3
 80024d4:	4651      	mov	r1, sl
 80024d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024da:	4651      	mov	r1, sl
 80024dc:	00ca      	lsls	r2, r1, #3
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	4642      	mov	r2, r8
 80024e6:	189b      	adds	r3, r3, r2
 80024e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024ec:	464b      	mov	r3, r9
 80024ee:	460a      	mov	r2, r1
 80024f0:	eb42 0303 	adc.w	r3, r2, r3
 80024f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002504:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002508:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800250c:	460b      	mov	r3, r1
 800250e:	18db      	adds	r3, r3, r3
 8002510:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002512:	4613      	mov	r3, r2
 8002514:	eb42 0303 	adc.w	r3, r2, r3
 8002518:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800251a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800251e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002522:	f7fd fe5d 	bl	80001e0 <__aeabi_uldivmod>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <UART_SetConfig+0x2d4>)
 800252c:	fba3 1302 	umull	r1, r3, r3, r2
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	2164      	movs	r1, #100	@ 0x64
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	3332      	adds	r3, #50	@ 0x32
 800253e:	4a08      	ldr	r2, [pc, #32]	@ (8002560 <UART_SetConfig+0x2d4>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	f003 0207 	and.w	r2, r3, #7
 800254a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4422      	add	r2, r4
 8002552:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002554:	e106      	b.n	8002764 <UART_SetConfig+0x4d8>
 8002556:	bf00      	nop
 8002558:	40011000 	.word	0x40011000
 800255c:	40011400 	.word	0x40011400
 8002560:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002568:	2200      	movs	r2, #0
 800256a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800256e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002572:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002576:	4642      	mov	r2, r8
 8002578:	464b      	mov	r3, r9
 800257a:	1891      	adds	r1, r2, r2
 800257c:	6239      	str	r1, [r7, #32]
 800257e:	415b      	adcs	r3, r3
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
 8002582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002586:	4641      	mov	r1, r8
 8002588:	1854      	adds	r4, r2, r1
 800258a:	4649      	mov	r1, r9
 800258c:	eb43 0501 	adc.w	r5, r3, r1
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	00eb      	lsls	r3, r5, #3
 800259a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800259e:	00e2      	lsls	r2, r4, #3
 80025a0:	4614      	mov	r4, r2
 80025a2:	461d      	mov	r5, r3
 80025a4:	4643      	mov	r3, r8
 80025a6:	18e3      	adds	r3, r4, r3
 80025a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025ac:	464b      	mov	r3, r9
 80025ae:	eb45 0303 	adc.w	r3, r5, r3
 80025b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025d2:	4629      	mov	r1, r5
 80025d4:	008b      	lsls	r3, r1, #2
 80025d6:	4621      	mov	r1, r4
 80025d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025dc:	4621      	mov	r1, r4
 80025de:	008a      	lsls	r2, r1, #2
 80025e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80025e4:	f7fd fdfc 	bl	80001e0 <__aeabi_uldivmod>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4b60      	ldr	r3, [pc, #384]	@ (8002770 <UART_SetConfig+0x4e4>)
 80025ee:	fba3 2302 	umull	r2, r3, r3, r2
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	011c      	lsls	r4, r3, #4
 80025f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025fa:	2200      	movs	r2, #0
 80025fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002600:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002604:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002608:	4642      	mov	r2, r8
 800260a:	464b      	mov	r3, r9
 800260c:	1891      	adds	r1, r2, r2
 800260e:	61b9      	str	r1, [r7, #24]
 8002610:	415b      	adcs	r3, r3
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002618:	4641      	mov	r1, r8
 800261a:	1851      	adds	r1, r2, r1
 800261c:	6139      	str	r1, [r7, #16]
 800261e:	4649      	mov	r1, r9
 8002620:	414b      	adcs	r3, r1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002630:	4659      	mov	r1, fp
 8002632:	00cb      	lsls	r3, r1, #3
 8002634:	4651      	mov	r1, sl
 8002636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800263a:	4651      	mov	r1, sl
 800263c:	00ca      	lsls	r2, r1, #3
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	4603      	mov	r3, r0
 8002644:	4642      	mov	r2, r8
 8002646:	189b      	adds	r3, r3, r2
 8002648:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800264c:	464b      	mov	r3, r9
 800264e:	460a      	mov	r2, r1
 8002650:	eb42 0303 	adc.w	r3, r2, r3
 8002654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002662:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002670:	4649      	mov	r1, r9
 8002672:	008b      	lsls	r3, r1, #2
 8002674:	4641      	mov	r1, r8
 8002676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800267a:	4641      	mov	r1, r8
 800267c:	008a      	lsls	r2, r1, #2
 800267e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002682:	f7fd fdad 	bl	80001e0 <__aeabi_uldivmod>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4611      	mov	r1, r2
 800268c:	4b38      	ldr	r3, [pc, #224]	@ (8002770 <UART_SetConfig+0x4e4>)
 800268e:	fba3 2301 	umull	r2, r3, r3, r1
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2264      	movs	r2, #100	@ 0x64
 8002696:	fb02 f303 	mul.w	r3, r2, r3
 800269a:	1acb      	subs	r3, r1, r3
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	3332      	adds	r3, #50	@ 0x32
 80026a0:	4a33      	ldr	r2, [pc, #204]	@ (8002770 <UART_SetConfig+0x4e4>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026ac:	441c      	add	r4, r3
 80026ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026b2:	2200      	movs	r2, #0
 80026b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80026b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80026b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80026bc:	4642      	mov	r2, r8
 80026be:	464b      	mov	r3, r9
 80026c0:	1891      	adds	r1, r2, r2
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	415b      	adcs	r3, r3
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026cc:	4641      	mov	r1, r8
 80026ce:	1851      	adds	r1, r2, r1
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	4649      	mov	r1, r9
 80026d4:	414b      	adcs	r3, r1
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026e4:	4659      	mov	r1, fp
 80026e6:	00cb      	lsls	r3, r1, #3
 80026e8:	4651      	mov	r1, sl
 80026ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ee:	4651      	mov	r1, sl
 80026f0:	00ca      	lsls	r2, r1, #3
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	4642      	mov	r2, r8
 80026fa:	189b      	adds	r3, r3, r2
 80026fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026fe:	464b      	mov	r3, r9
 8002700:	460a      	mov	r2, r1
 8002702:	eb42 0303 	adc.w	r3, r2, r3
 8002706:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	663b      	str	r3, [r7, #96]	@ 0x60
 8002712:	667a      	str	r2, [r7, #100]	@ 0x64
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002720:	4649      	mov	r1, r9
 8002722:	008b      	lsls	r3, r1, #2
 8002724:	4641      	mov	r1, r8
 8002726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800272a:	4641      	mov	r1, r8
 800272c:	008a      	lsls	r2, r1, #2
 800272e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002732:	f7fd fd55 	bl	80001e0 <__aeabi_uldivmod>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4b0d      	ldr	r3, [pc, #52]	@ (8002770 <UART_SetConfig+0x4e4>)
 800273c:	fba3 1302 	umull	r1, r3, r3, r2
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	2164      	movs	r1, #100	@ 0x64
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	3332      	adds	r3, #50	@ 0x32
 800274e:	4a08      	ldr	r2, [pc, #32]	@ (8002770 <UART_SetConfig+0x4e4>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	f003 020f 	and.w	r2, r3, #15
 800275a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4422      	add	r2, r4
 8002762:	609a      	str	r2, [r3, #8]
}
 8002764:	bf00      	nop
 8002766:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800276a:	46bd      	mov	sp, r7
 800276c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002770:	51eb851f 	.word	0x51eb851f

08002774 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002786:	2b84      	cmp	r3, #132	@ 0x84
 8002788:	d005      	beq.n	8002796 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800278a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	3303      	adds	r3, #3
 8002794:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80027a8:	f000 ffb8 	bl	800371c <vTaskStartScheduler>
  
  return osOK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80027b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b4:	b089      	sub	sp, #36	@ 0x24
 80027b6:	af04      	add	r7, sp, #16
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d020      	beq.n	8002806 <osThreadCreate+0x54>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01c      	beq.n	8002806 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685c      	ldr	r4, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691e      	ldr	r6, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ffc8 	bl	8002774 <makeFreeRtosPriority>
 80027e4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027ee:	9202      	str	r2, [sp, #8]
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	9100      	str	r1, [sp, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4632      	mov	r2, r6
 80027f8:	4629      	mov	r1, r5
 80027fa:	4620      	mov	r0, r4
 80027fc:	f000 fda8 	bl	8003350 <xTaskCreateStatic>
 8002800:	4603      	mov	r3, r0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	e01c      	b.n	8002840 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685c      	ldr	r4, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002812:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ffaa 	bl	8002774 <makeFreeRtosPriority>
 8002820:	4602      	mov	r2, r0
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	9200      	str	r2, [sp, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	4632      	mov	r2, r6
 800282e:	4629      	mov	r1, r5
 8002830:	4620      	mov	r0, r4
 8002832:	f000 fded 	bl	8003410 <xTaskCreate>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d001      	beq.n	8002840 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800283c:	2300      	movs	r3, #0
 800283e:	e000      	b.n	8002842 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002840:	68fb      	ldr	r3, [r7, #12]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800284a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <osDelay+0x16>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	e000      	b.n	8002862 <osDelay+0x18>
 8002860:	2301      	movs	r3, #1
 8002862:	4618      	mov	r0, r3
 8002864:	f000 ff24 	bl	80036b0 <vTaskDelay>
  
  return osOK;
 8002868:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4619      	mov	r1, r3
 8002888:	2001      	movs	r0, #1
 800288a:	f000 fa32 	bl	8002cf2 <xQueueCreateMutexStatic>
 800288e:	4603      	mov	r3, r0
 8002890:	e003      	b.n	800289a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002892:	2001      	movs	r0, #1
 8002894:	f000 fa15 	bl	8002cc2 <xQueueCreateMutex>
 8002898:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f103 0208 	add.w	r2, r3, #8
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f103 0208 	add.w	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f103 0208 	add.w	r2, r3, #8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800295a:	d103      	bne.n	8002964 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	e00c      	b.n	800297e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3308      	adds	r3, #8
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e002      	b.n	8002972 <vListInsert+0x2e>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	429a      	cmp	r2, r3
 800297c:	d2f6      	bcs.n	800296c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	601a      	str	r2, [r3, #0]
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6892      	ldr	r2, [r2, #8]
 80029cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6852      	ldr	r2, [r2, #4]
 80029d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d103      	bne.n	80029ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1e5a      	subs	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10b      	bne.n	8002a38 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a32:	bf00      	nop
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a38:	f001 fde6 	bl	8004608 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a44:	68f9      	ldr	r1, [r7, #12]
 8002a46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	441a      	add	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	68f9      	ldr	r1, [r7, #12]
 8002a6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	441a      	add	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	22ff      	movs	r2, #255	@ 0xff
 8002a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	22ff      	movs	r2, #255	@ 0xff
 8002a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d114      	bne.n	8002ab8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01a      	beq.n	8002acc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3310      	adds	r3, #16
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 f898 	bl	8003bd0 <xTaskRemoveFromEventList>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d012      	beq.n	8002acc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <xQueueGenericReset+0xd0>)
 8002aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	e009      	b.n	8002acc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3310      	adds	r3, #16
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fef0 	bl	80028a2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3324      	adds	r3, #36	@ 0x24
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff feeb 	bl	80028a2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002acc:	f001 fdce 	bl	800466c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ad0:	2301      	movs	r3, #1
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	e000ed04 	.word	0xe000ed04

08002ae0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08e      	sub	sp, #56	@ 0x38
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10b      	bne.n	8002b0c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10b      	bne.n	8002b2a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	e7fd      	b.n	8002b26 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <xQueueGenericCreateStatic+0x56>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <xQueueGenericCreateStatic+0x5a>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <xQueueGenericCreateStatic+0x5c>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10b      	bne.n	8002b58 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	623b      	str	r3, [r7, #32]
}
 8002b52:	bf00      	nop
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <xQueueGenericCreateStatic+0x84>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <xQueueGenericCreateStatic+0x88>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <xQueueGenericCreateStatic+0x8a>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10b      	bne.n	8002b86 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	61fb      	str	r3, [r7, #28]
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	e7fd      	b.n	8002b82 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b86:	2348      	movs	r3, #72	@ 0x48
 8002b88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b48      	cmp	r3, #72	@ 0x48
 8002b8e:	d00b      	beq.n	8002ba8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	61bb      	str	r3, [r7, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ba8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00d      	beq.n	8002bd0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bbc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f840 	bl	8002c50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3730      	adds	r7, #48	@ 0x30
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b08a      	sub	sp, #40	@ 0x28
 8002bde:	af02      	add	r7, sp, #8
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	4613      	mov	r3, r2
 8002be6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10b      	bne.n	8002c06 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	613b      	str	r3, [r7, #16]
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	e7fd      	b.n	8002c02 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	3348      	adds	r3, #72	@ 0x48
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 fdd7 	bl	80047c8 <pvPortMalloc>
 8002c1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d011      	beq.n	8002c46 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3348      	adds	r3, #72	@ 0x48
 8002c2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c34:	79fa      	ldrb	r2, [r7, #7]
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f805 	bl	8002c50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c46:	69bb      	ldr	r3, [r7, #24]
	}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d103      	bne.n	8002c6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e002      	b.n	8002c72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c7e:	2101      	movs	r1, #1
 8002c80:	69b8      	ldr	r0, [r7, #24]
 8002c82:	f7ff fec3 	bl	8002a0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f837 	bl	8002d28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6939      	ldr	r1, [r7, #16]
 8002cda:	6978      	ldr	r0, [r7, #20]
 8002cdc:	f7ff ff7d 	bl	8002bda <xQueueGenericCreate>
 8002ce0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff ffd3 	bl	8002c8e <prvInitialiseMutex>

		return xNewQueue;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
	}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b088      	sub	sp, #32
 8002cf6:	af02      	add	r7, sp, #8
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	6039      	str	r1, [r7, #0]
 8002cfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	6939      	ldr	r1, [r7, #16]
 8002d10:	6978      	ldr	r0, [r7, #20]
 8002d12:	f7ff fee5 	bl	8002ae0 <xQueueGenericCreateStatic>
 8002d16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff ffb8 	bl	8002c8e <prvInitialiseMutex>

		return xNewQueue;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
	}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08e      	sub	sp, #56	@ 0x38
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10b      	bne.n	8002d5c <xQueueGenericSend+0x34>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <xQueueGenericSend+0x42>
 8002d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <xQueueGenericSend+0x46>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <xQueueGenericSend+0x48>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10b      	bne.n	8002d8c <xQueueGenericSend+0x64>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d86:	bf00      	nop
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d103      	bne.n	8002d9a <xQueueGenericSend+0x72>
 8002d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <xQueueGenericSend+0x76>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <xQueueGenericSend+0x78>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <xQueueGenericSend+0x94>
	__asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	623b      	str	r3, [r7, #32]
}
 8002db6:	bf00      	nop
 8002db8:	bf00      	nop
 8002dba:	e7fd      	b.n	8002db8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dbc:	f001 f8ce 	bl	8003f5c <xTaskGetSchedulerState>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <xQueueGenericSend+0xa4>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <xQueueGenericSend+0xa8>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <xQueueGenericSend+0xaa>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10b      	bne.n	8002dee <xQueueGenericSend+0xc6>
	__asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	61fb      	str	r3, [r7, #28]
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	e7fd      	b.n	8002dea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dee:	f001 fc0b 	bl	8004608 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d302      	bcc.n	8002e04 <xQueueGenericSend+0xdc>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d129      	bne.n	8002e58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e0a:	f000 f9b7 	bl	800317c <prvCopyDataToQueue>
 8002e0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1a:	3324      	adds	r3, #36	@ 0x24
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fed7 	bl	8003bd0 <xTaskRemoveFromEventList>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e28:	4b3f      	ldr	r3, [pc, #252]	@ (8002f28 <xQueueGenericSend+0x200>)
 8002e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	e00a      	b.n	8002e50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e40:	4b39      	ldr	r3, [pc, #228]	@ (8002f28 <xQueueGenericSend+0x200>)
 8002e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e50:	f001 fc0c 	bl	800466c <vPortExitCritical>
				return pdPASS;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e063      	b.n	8002f20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e5e:	f001 fc05 	bl	800466c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e05c      	b.n	8002f20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d106      	bne.n	8002e7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 ff11 	bl	8003c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e76:	2301      	movs	r3, #1
 8002e78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e7a:	f001 fbf7 	bl	800466c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e7e:	f000 fcb7 	bl	80037f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e82:	f001 fbc1 	bl	8004608 <vPortEnterCritical>
 8002e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e92:	d103      	bne.n	8002e9c <xQueueGenericSend+0x174>
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ea8:	d103      	bne.n	8002eb2 <xQueueGenericSend+0x18a>
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002eb2:	f001 fbdb 	bl	800466c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eb6:	1d3a      	adds	r2, r7, #4
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 ff00 	bl	8003cc4 <xTaskCheckForTimeOut>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d124      	bne.n	8002f14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ecc:	f000 fa28 	bl	8003320 <prvIsQueueFull>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d018      	beq.n	8002f08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	3310      	adds	r3, #16
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fe50 	bl	8003b84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ee4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ee6:	f000 f9b3 	bl	8003250 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002eea:	f000 fc8f 	bl	800380c <xTaskResumeAll>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f af7c 	bne.w	8002dee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <xQueueGenericSend+0x200>)
 8002ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	e772      	b.n	8002dee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f0a:	f000 f9a1 	bl	8003250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f0e:	f000 fc7d 	bl	800380c <xTaskResumeAll>
 8002f12:	e76c      	b.n	8002dee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f16:	f000 f99b 	bl	8003250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f1a:	f000 fc77 	bl	800380c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3738      	adds	r7, #56	@ 0x38
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	e000ed04 	.word	0xe000ed04

08002f2c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	@ 0x38
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	623b      	str	r3, [r7, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00b      	beq.n	8002f80 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	61fb      	str	r3, [r7, #28]
}
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f80:	f000 ffec 	bl	8003f5c <xTaskGetSchedulerState>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <xQueueSemaphoreTake+0x64>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <xQueueSemaphoreTake+0x68>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <xQueueSemaphoreTake+0x6a>
 8002f94:	2300      	movs	r3, #0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	61bb      	str	r3, [r7, #24]
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	e7fd      	b.n	8002fae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fb2:	f001 fb29 	bl	8004608 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d024      	beq.n	800300c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc4:	1e5a      	subs	r2, r3, #1
 8002fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d104      	bne.n	8002fdc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002fd2:	f001 f96f 	bl	80042b4 <pvTaskIncrementMutexHeldCount>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fda:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00f      	beq.n	8003004 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe6:	3310      	adds	r3, #16
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fdf1 	bl	8003bd0 <xTaskRemoveFromEventList>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ff4:	4b54      	ldr	r3, [pc, #336]	@ (8003148 <xQueueSemaphoreTake+0x21c>)
 8002ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003004:	f001 fb32 	bl	800466c <vPortExitCritical>
				return pdPASS;
 8003008:	2301      	movs	r3, #1
 800300a:	e098      	b.n	800313e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d112      	bne.n	8003038 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	617b      	str	r3, [r7, #20]
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003030:	f001 fb1c 	bl	800466c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003034:	2300      	movs	r3, #0
 8003036:	e082      	b.n	800313e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800303e:	f107 030c 	add.w	r3, r7, #12
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fe28 	bl	8003c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003048:	2301      	movs	r3, #1
 800304a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800304c:	f001 fb0e 	bl	800466c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003050:	f000 fbce 	bl	80037f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003054:	f001 fad8 	bl	8004608 <vPortEnterCritical>
 8003058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800305e:	b25b      	sxtb	r3, r3
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003064:	d103      	bne.n	800306e <xQueueSemaphoreTake+0x142>
 8003066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800306e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003070:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003074:	b25b      	sxtb	r3, r3
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800307a:	d103      	bne.n	8003084 <xQueueSemaphoreTake+0x158>
 800307c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003084:	f001 faf2 	bl	800466c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003088:	463a      	mov	r2, r7
 800308a:	f107 030c 	add.w	r3, r7, #12
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fe17 	bl	8003cc4 <xTaskCheckForTimeOut>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d132      	bne.n	8003102 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800309c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800309e:	f000 f929 	bl	80032f4 <prvIsQueueEmpty>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d026      	beq.n	80030f6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d109      	bne.n	80030c4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80030b0:	f001 faaa 	bl	8004608 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 ff6d 	bl	8003f98 <xTaskPriorityInherit>
 80030be:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80030c0:	f001 fad4 	bl	800466c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c6:	3324      	adds	r3, #36	@ 0x24
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fd59 	bl	8003b84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030d4:	f000 f8bc 	bl	8003250 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030d8:	f000 fb98 	bl	800380c <xTaskResumeAll>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f47f af67 	bne.w	8002fb2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80030e4:	4b18      	ldr	r3, [pc, #96]	@ (8003148 <xQueueSemaphoreTake+0x21c>)
 80030e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	e75d      	b.n	8002fb2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80030f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030f8:	f000 f8aa 	bl	8003250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030fc:	f000 fb86 	bl	800380c <xTaskResumeAll>
 8003100:	e757      	b.n	8002fb2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003102:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003104:	f000 f8a4 	bl	8003250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003108:	f000 fb80 	bl	800380c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800310c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800310e:	f000 f8f1 	bl	80032f4 <prvIsQueueEmpty>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	f43f af4c 	beq.w	8002fb2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800311a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003120:	f001 fa72 	bl	8004608 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003124:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003126:	f000 f811 	bl	800314c <prvGetDisinheritPriorityAfterTimeout>
 800312a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800312c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003132:	4618      	mov	r0, r3
 8003134:	f001 f82e 	bl	8004194 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003138:	f001 fa98 	bl	800466c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800313c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800313e:	4618      	mov	r0, r3
 8003140:	3738      	adds	r7, #56	@ 0x38
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	e000ed04 	.word	0xe000ed04

0800314c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	2b00      	cmp	r3, #0
 800315a:	d006      	beq.n	800316a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f1c3 0307 	rsb	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e001      	b.n	800316e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800316e:	68fb      	ldr	r3, [r7, #12]
	}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003190:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10d      	bne.n	80031b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d14d      	bne.n	800323e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 ff6c 	bl	8004084 <xTaskPriorityDisinherit>
 80031ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	e043      	b.n	800323e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d119      	bne.n	80031f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6858      	ldr	r0, [r3, #4]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	461a      	mov	r2, r3
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	f001 fd78 	bl	8004cbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	441a      	add	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d32b      	bcc.n	800323e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	e026      	b.n	800323e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	68d8      	ldr	r0, [r3, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	461a      	mov	r2, r3
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	f001 fd5e 	bl	8004cbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	425b      	negs	r3, r3
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d207      	bcs.n	800322c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	425b      	negs	r3, r3
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d105      	bne.n	800323e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	3b01      	subs	r3, #1
 800323c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003246:	697b      	ldr	r3, [r7, #20]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003258:	f001 f9d6 	bl	8004608 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003262:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003264:	e011      	b.n	800328a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	d012      	beq.n	8003294 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3324      	adds	r3, #36	@ 0x24
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fcac 	bl	8003bd0 <xTaskRemoveFromEventList>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800327e:	f000 fd85 	bl	8003d8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	3b01      	subs	r3, #1
 8003286:	b2db      	uxtb	r3, r3
 8003288:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800328a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328e:	2b00      	cmp	r3, #0
 8003290:	dce9      	bgt.n	8003266 <prvUnlockQueue+0x16>
 8003292:	e000      	b.n	8003296 <prvUnlockQueue+0x46>
					break;
 8003294:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	22ff      	movs	r2, #255	@ 0xff
 800329a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800329e:	f001 f9e5 	bl	800466c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032a2:	f001 f9b1 	bl	8004608 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032ae:	e011      	b.n	80032d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d012      	beq.n	80032de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3310      	adds	r3, #16
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fc87 	bl	8003bd0 <xTaskRemoveFromEventList>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032c8:	f000 fd60 	bl	8003d8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032cc:	7bbb      	ldrb	r3, [r7, #14]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	dce9      	bgt.n	80032b0 <prvUnlockQueue+0x60>
 80032dc:	e000      	b.n	80032e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	22ff      	movs	r2, #255	@ 0xff
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80032e8:	f001 f9c0 	bl	800466c <vPortExitCritical>
}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032fc:	f001 f984 	bl	8004608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003308:	2301      	movs	r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	e001      	b.n	8003312 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003312:	f001 f9ab 	bl	800466c <vPortExitCritical>

	return xReturn;
 8003316:	68fb      	ldr	r3, [r7, #12]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003328:	f001 f96e 	bl	8004608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003334:	429a      	cmp	r2, r3
 8003336:	d102      	bne.n	800333e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003338:	2301      	movs	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	e001      	b.n	8003342 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003342:	f001 f993 	bl	800466c <vPortExitCritical>

	return xReturn;
 8003346:	68fb      	ldr	r3, [r7, #12]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08e      	sub	sp, #56	@ 0x38
 8003354:	af04      	add	r7, sp, #16
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800335e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	623b      	str	r3, [r7, #32]
}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	e7fd      	b.n	8003378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800337c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	61fb      	str	r3, [r7, #28]
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	e7fd      	b.n	8003396 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800339a:	23a0      	movs	r3, #160	@ 0xa0
 800339c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80033a2:	d00b      	beq.n	80033bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	61bb      	str	r3, [r7, #24]
}
 80033b6:	bf00      	nop
 80033b8:	bf00      	nop
 80033ba:	e7fd      	b.n	80033b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01e      	beq.n	8003402 <xTaskCreateStatic+0xb2>
 80033c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01b      	beq.n	8003402 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033dc:	2300      	movs	r3, #0
 80033de:	9303      	str	r3, [sp, #12]
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	9302      	str	r3, [sp, #8]
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f851 	bl	800349c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033fc:	f000 f8ee 	bl	80035dc <prvAddNewTaskToReadyList>
 8003400:	e001      	b.n	8003406 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003406:	697b      	ldr	r3, [r7, #20]
	}
 8003408:	4618      	mov	r0, r3
 800340a:	3728      	adds	r7, #40	@ 0x28
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08c      	sub	sp, #48	@ 0x30
 8003414:	af04      	add	r7, sp, #16
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4618      	mov	r0, r3
 8003426:	f001 f9cf 	bl	80047c8 <pvPortMalloc>
 800342a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00e      	beq.n	8003450 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003432:	20a0      	movs	r0, #160	@ 0xa0
 8003434:	f001 f9c8 	bl	80047c8 <pvPortMalloc>
 8003438:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	631a      	str	r2, [r3, #48]	@ 0x30
 8003446:	e005      	b.n	8003454 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003448:	6978      	ldr	r0, [r7, #20]
 800344a:	f001 fa8b 	bl	8004964 <vPortFree>
 800344e:	e001      	b.n	8003454 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003450:	2300      	movs	r3, #0
 8003452:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d017      	beq.n	800348a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	2300      	movs	r3, #0
 8003466:	9303      	str	r3, [sp, #12]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	9302      	str	r3, [sp, #8]
 800346c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f80f 	bl	800349c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800347e:	69f8      	ldr	r0, [r7, #28]
 8003480:	f000 f8ac 	bl	80035dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003484:	2301      	movs	r3, #1
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e002      	b.n	8003490 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800348e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003490:	69bb      	ldr	r3, [r7, #24]
	}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034b4:	3b01      	subs	r3, #1
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f023 0307 	bic.w	r3, r3, #7
 80034c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	617b      	str	r3, [r7, #20]
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	e7fd      	b.n	80034e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01f      	beq.n	800352c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	e012      	b.n	8003518 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	4413      	add	r3, r2
 80034f8:	7819      	ldrb	r1, [r3, #0]
 80034fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	4413      	add	r3, r2
 8003500:	3334      	adds	r3, #52	@ 0x34
 8003502:	460a      	mov	r2, r1
 8003504:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	4413      	add	r3, r2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	d9e9      	bls.n	80034f2 <prvInitialiseNewTask+0x56>
 800351e:	e000      	b.n	8003522 <prvInitialiseNewTask+0x86>
			{
				break;
 8003520:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800352a:	e003      	b.n	8003534 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003536:	2b06      	cmp	r3, #6
 8003538:	d901      	bls.n	800353e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800353a:	2306      	movs	r3, #6
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800353e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003542:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003548:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	2200      	movs	r2, #0
 800354e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003552:	3304      	adds	r3, #4
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff f9c4 	bl	80028e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355c:	3318      	adds	r3, #24
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff f9bf 	bl	80028e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003568:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356c:	f1c3 0207 	rsb	r2, r3, #7
 8003570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003572:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003578:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	2200      	movs	r2, #0
 800357e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003584:	2200      	movs	r2, #0
 8003586:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	334c      	adds	r3, #76	@ 0x4c
 800358e:	224c      	movs	r2, #76	@ 0x4c
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fb06 	bl	8004ba4 <memset>
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	4a0d      	ldr	r2, [pc, #52]	@ (80035d0 <prvInitialiseNewTask+0x134>)
 800359c:	651a      	str	r2, [r3, #80]	@ 0x50
 800359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a0:	4a0c      	ldr	r2, [pc, #48]	@ (80035d4 <prvInitialiseNewTask+0x138>)
 80035a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a6:	4a0c      	ldr	r2, [pc, #48]	@ (80035d8 <prvInitialiseNewTask+0x13c>)
 80035a8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	68f9      	ldr	r1, [r7, #12]
 80035ae:	69b8      	ldr	r0, [r7, #24]
 80035b0:	f000 fefa 	bl	80043a8 <pxPortInitialiseStack>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035c6:	bf00      	nop
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20004114 	.word	0x20004114
 80035d4:	2000417c 	.word	0x2000417c
 80035d8:	200041e4 	.word	0x200041e4

080035dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035e4:	f001 f810 	bl	8004608 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <prvAddNewTaskToReadyList+0xb8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3301      	adds	r3, #1
 80035ee:	4a29      	ldr	r2, [pc, #164]	@ (8003694 <prvAddNewTaskToReadyList+0xb8>)
 80035f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035f2:	4b29      	ldr	r3, [pc, #164]	@ (8003698 <prvAddNewTaskToReadyList+0xbc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035fa:	4a27      	ldr	r2, [pc, #156]	@ (8003698 <prvAddNewTaskToReadyList+0xbc>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003600:	4b24      	ldr	r3, [pc, #144]	@ (8003694 <prvAddNewTaskToReadyList+0xb8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d110      	bne.n	800362a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003608:	f000 fbe4 	bl	8003dd4 <prvInitialiseTaskLists>
 800360c:	e00d      	b.n	800362a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800360e:	4b23      	ldr	r3, [pc, #140]	@ (800369c <prvAddNewTaskToReadyList+0xc0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003616:	4b20      	ldr	r3, [pc, #128]	@ (8003698 <prvAddNewTaskToReadyList+0xbc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	429a      	cmp	r2, r3
 8003622:	d802      	bhi.n	800362a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003624:	4a1c      	ldr	r2, [pc, #112]	@ (8003698 <prvAddNewTaskToReadyList+0xbc>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800362a:	4b1d      	ldr	r3, [pc, #116]	@ (80036a0 <prvAddNewTaskToReadyList+0xc4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	4a1b      	ldr	r2, [pc, #108]	@ (80036a0 <prvAddNewTaskToReadyList+0xc4>)
 8003632:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	2201      	movs	r2, #1
 800363a:	409a      	lsls	r2, r3
 800363c:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <prvAddNewTaskToReadyList+0xc8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4313      	orrs	r3, r2
 8003642:	4a18      	ldr	r2, [pc, #96]	@ (80036a4 <prvAddNewTaskToReadyList+0xc8>)
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4a15      	ldr	r2, [pc, #84]	@ (80036a8 <prvAddNewTaskToReadyList+0xcc>)
 8003654:	441a      	add	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f7ff f94d 	bl	80028fc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003662:	f001 f803 	bl	800466c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003666:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <prvAddNewTaskToReadyList+0xc0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00e      	beq.n	800368c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800366e:	4b0a      	ldr	r3, [pc, #40]	@ (8003698 <prvAddNewTaskToReadyList+0xbc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	429a      	cmp	r2, r3
 800367a:	d207      	bcs.n	800368c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <prvAddNewTaskToReadyList+0xd0>)
 800367e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	200004c0 	.word	0x200004c0
 8003698:	200003c0 	.word	0x200003c0
 800369c:	200004cc 	.word	0x200004cc
 80036a0:	200004dc 	.word	0x200004dc
 80036a4:	200004c8 	.word	0x200004c8
 80036a8:	200003c4 	.word	0x200003c4
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d018      	beq.n	80036f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036c2:	4b14      	ldr	r3, [pc, #80]	@ (8003714 <vTaskDelay+0x64>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <vTaskDelay+0x32>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	60bb      	str	r3, [r7, #8]
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	e7fd      	b.n	80036de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036e2:	f000 f885 	bl	80037f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036e6:	2100      	movs	r1, #0
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fdf7 	bl	80042dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036ee:	f000 f88d 	bl	800380c <xTaskResumeAll>
 80036f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d107      	bne.n	800370a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80036fa:	4b07      	ldr	r3, [pc, #28]	@ (8003718 <vTaskDelay+0x68>)
 80036fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	200004e8 	.word	0x200004e8
 8003718:	e000ed04 	.word	0xe000ed04

0800371c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	@ 0x28
 8003720:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800372a:	463a      	mov	r2, r7
 800372c:	1d39      	adds	r1, r7, #4
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc feea 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	9202      	str	r2, [sp, #8]
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	2300      	movs	r3, #0
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2300      	movs	r3, #0
 8003748:	460a      	mov	r2, r1
 800374a:	4921      	ldr	r1, [pc, #132]	@ (80037d0 <vTaskStartScheduler+0xb4>)
 800374c:	4821      	ldr	r0, [pc, #132]	@ (80037d4 <vTaskStartScheduler+0xb8>)
 800374e:	f7ff fdff 	bl	8003350 <xTaskCreateStatic>
 8003752:	4603      	mov	r3, r0
 8003754:	4a20      	ldr	r2, [pc, #128]	@ (80037d8 <vTaskStartScheduler+0xbc>)
 8003756:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003758:	4b1f      	ldr	r3, [pc, #124]	@ (80037d8 <vTaskStartScheduler+0xbc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003760:	2301      	movs	r3, #1
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e001      	b.n	800376a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d11b      	bne.n	80037a8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	613b      	str	r3, [r7, #16]
}
 8003782:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003784:	4b15      	ldr	r3, [pc, #84]	@ (80037dc <vTaskStartScheduler+0xc0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	334c      	adds	r3, #76	@ 0x4c
 800378a:	4a15      	ldr	r2, [pc, #84]	@ (80037e0 <vTaskStartScheduler+0xc4>)
 800378c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800378e:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <vTaskStartScheduler+0xc8>)
 8003790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003794:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003796:	4b14      	ldr	r3, [pc, #80]	@ (80037e8 <vTaskStartScheduler+0xcc>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800379c:	4b13      	ldr	r3, [pc, #76]	@ (80037ec <vTaskStartScheduler+0xd0>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037a2:	f000 fe8d 	bl	80044c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037a6:	e00f      	b.n	80037c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037ae:	d10b      	bne.n	80037c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	60fb      	str	r3, [r7, #12]
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	e7fd      	b.n	80037c4 <vTaskStartScheduler+0xa8>
}
 80037c8:	bf00      	nop
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	08004e3c 	.word	0x08004e3c
 80037d4:	08003da5 	.word	0x08003da5
 80037d8:	200004e4 	.word	0x200004e4
 80037dc:	200003c0 	.word	0x200003c0
 80037e0:	20000010 	.word	0x20000010
 80037e4:	200004e0 	.word	0x200004e0
 80037e8:	200004cc 	.word	0x200004cc
 80037ec:	200004c4 	.word	0x200004c4

080037f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037f4:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <vTaskSuspendAll+0x18>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	4a03      	ldr	r2, [pc, #12]	@ (8003808 <vTaskSuspendAll+0x18>)
 80037fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037fe:	bf00      	nop
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	200004e8 	.word	0x200004e8

0800380c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800381a:	4b42      	ldr	r3, [pc, #264]	@ (8003924 <xTaskResumeAll+0x118>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <xTaskResumeAll+0x2e>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	603b      	str	r3, [r7, #0]
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	e7fd      	b.n	8003836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800383a:	f000 fee5 	bl	8004608 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800383e:	4b39      	ldr	r3, [pc, #228]	@ (8003924 <xTaskResumeAll+0x118>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3b01      	subs	r3, #1
 8003844:	4a37      	ldr	r2, [pc, #220]	@ (8003924 <xTaskResumeAll+0x118>)
 8003846:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003848:	4b36      	ldr	r3, [pc, #216]	@ (8003924 <xTaskResumeAll+0x118>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d161      	bne.n	8003914 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003850:	4b35      	ldr	r3, [pc, #212]	@ (8003928 <xTaskResumeAll+0x11c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d05d      	beq.n	8003914 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003858:	e02e      	b.n	80038b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800385a:	4b34      	ldr	r3, [pc, #208]	@ (800392c <xTaskResumeAll+0x120>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3318      	adds	r3, #24
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff f8a5 	bl	80029b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3304      	adds	r3, #4
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff f8a0 	bl	80029b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	2201      	movs	r2, #1
 800387c:	409a      	lsls	r2, r3
 800387e:	4b2c      	ldr	r3, [pc, #176]	@ (8003930 <xTaskResumeAll+0x124>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	4a2a      	ldr	r2, [pc, #168]	@ (8003930 <xTaskResumeAll+0x124>)
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4a27      	ldr	r2, [pc, #156]	@ (8003934 <xTaskResumeAll+0x128>)
 8003896:	441a      	add	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	3304      	adds	r3, #4
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f7ff f82c 	bl	80028fc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a8:	4b23      	ldr	r3, [pc, #140]	@ (8003938 <xTaskResumeAll+0x12c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80038b2:	4b22      	ldr	r3, [pc, #136]	@ (800393c <xTaskResumeAll+0x130>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038b8:	4b1c      	ldr	r3, [pc, #112]	@ (800392c <xTaskResumeAll+0x120>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1cc      	bne.n	800385a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038c6:	f000 fb29 	bl	8003f1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003940 <xTaskResumeAll+0x134>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d010      	beq.n	80038f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038d6:	f000 f837 	bl	8003948 <xTaskIncrementTick>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80038e0:	4b16      	ldr	r3, [pc, #88]	@ (800393c <xTaskResumeAll+0x130>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f1      	bne.n	80038d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80038f2:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <xTaskResumeAll+0x134>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038f8:	4b10      	ldr	r3, [pc, #64]	@ (800393c <xTaskResumeAll+0x130>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d009      	beq.n	8003914 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003900:	2301      	movs	r3, #1
 8003902:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003904:	4b0f      	ldr	r3, [pc, #60]	@ (8003944 <xTaskResumeAll+0x138>)
 8003906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003914:	f000 feaa 	bl	800466c <vPortExitCritical>

	return xAlreadyYielded;
 8003918:	68bb      	ldr	r3, [r7, #8]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	200004e8 	.word	0x200004e8
 8003928:	200004c0 	.word	0x200004c0
 800392c:	20000480 	.word	0x20000480
 8003930:	200004c8 	.word	0x200004c8
 8003934:	200003c4 	.word	0x200003c4
 8003938:	200003c0 	.word	0x200003c0
 800393c:	200004d4 	.word	0x200004d4
 8003940:	200004d0 	.word	0x200004d0
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003952:	4b4f      	ldr	r3, [pc, #316]	@ (8003a90 <xTaskIncrementTick+0x148>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f040 808f 	bne.w	8003a7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800395c:	4b4d      	ldr	r3, [pc, #308]	@ (8003a94 <xTaskIncrementTick+0x14c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003964:	4a4b      	ldr	r2, [pc, #300]	@ (8003a94 <xTaskIncrementTick+0x14c>)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d121      	bne.n	80039b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003970:	4b49      	ldr	r3, [pc, #292]	@ (8003a98 <xTaskIncrementTick+0x150>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <xTaskIncrementTick+0x4a>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	603b      	str	r3, [r7, #0]
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	e7fd      	b.n	800398e <xTaskIncrementTick+0x46>
 8003992:	4b41      	ldr	r3, [pc, #260]	@ (8003a98 <xTaskIncrementTick+0x150>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	4b40      	ldr	r3, [pc, #256]	@ (8003a9c <xTaskIncrementTick+0x154>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a98 <xTaskIncrementTick+0x150>)
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	4a3e      	ldr	r2, [pc, #248]	@ (8003a9c <xTaskIncrementTick+0x154>)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa0 <xTaskIncrementTick+0x158>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3301      	adds	r3, #1
 80039ac:	4a3c      	ldr	r2, [pc, #240]	@ (8003aa0 <xTaskIncrementTick+0x158>)
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	f000 fab4 	bl	8003f1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039b4:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa4 <xTaskIncrementTick+0x15c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d348      	bcc.n	8003a50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039be:	4b36      	ldr	r3, [pc, #216]	@ (8003a98 <xTaskIncrementTick+0x150>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c8:	4b36      	ldr	r3, [pc, #216]	@ (8003aa4 <xTaskIncrementTick+0x15c>)
 80039ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039ce:	601a      	str	r2, [r3, #0]
					break;
 80039d0:	e03e      	b.n	8003a50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d2:	4b31      	ldr	r3, [pc, #196]	@ (8003a98 <xTaskIncrementTick+0x150>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d203      	bcs.n	80039f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039ea:	4a2e      	ldr	r2, [pc, #184]	@ (8003aa4 <xTaskIncrementTick+0x15c>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039f0:	e02e      	b.n	8003a50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	3304      	adds	r3, #4
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe ffdd 	bl	80029b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	3318      	adds	r3, #24
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe ffd4 	bl	80029b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	2201      	movs	r2, #1
 8003a14:	409a      	lsls	r2, r3
 8003a16:	4b24      	ldr	r3, [pc, #144]	@ (8003aa8 <xTaskIncrementTick+0x160>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	4a22      	ldr	r2, [pc, #136]	@ (8003aa8 <xTaskIncrementTick+0x160>)
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003aac <xTaskIncrementTick+0x164>)
 8003a2e:	441a      	add	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f7fe ff60 	bl	80028fc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a40:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <xTaskIncrementTick+0x168>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d3b9      	bcc.n	80039be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a4e:	e7b6      	b.n	80039be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a50:	4b17      	ldr	r3, [pc, #92]	@ (8003ab0 <xTaskIncrementTick+0x168>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a56:	4915      	ldr	r1, [pc, #84]	@ (8003aac <xTaskIncrementTick+0x164>)
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d901      	bls.n	8003a6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a6c:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <xTaskIncrementTick+0x16c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	e004      	b.n	8003a84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab8 <xTaskIncrementTick+0x170>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab8 <xTaskIncrementTick+0x170>)
 8003a82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a84:	697b      	ldr	r3, [r7, #20]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200004e8 	.word	0x200004e8
 8003a94:	200004c4 	.word	0x200004c4
 8003a98:	20000478 	.word	0x20000478
 8003a9c:	2000047c 	.word	0x2000047c
 8003aa0:	200004d8 	.word	0x200004d8
 8003aa4:	200004e0 	.word	0x200004e0
 8003aa8:	200004c8 	.word	0x200004c8
 8003aac:	200003c4 	.word	0x200003c4
 8003ab0:	200003c0 	.word	0x200003c0
 8003ab4:	200004d4 	.word	0x200004d4
 8003ab8:	200004d0 	.word	0x200004d0

08003abc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b6c <vTaskSwitchContext+0xb0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003aca:	4b29      	ldr	r3, [pc, #164]	@ (8003b70 <vTaskSwitchContext+0xb4>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ad0:	e045      	b.n	8003b5e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003ad2:	4b27      	ldr	r3, [pc, #156]	@ (8003b70 <vTaskSwitchContext+0xb4>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad8:	4b26      	ldr	r3, [pc, #152]	@ (8003b74 <vTaskSwitchContext+0xb8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	fab3 f383 	clz	r3, r3
 8003ae4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
 8003ae8:	f1c3 031f 	rsb	r3, r3, #31
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	4922      	ldr	r1, [pc, #136]	@ (8003b78 <vTaskSwitchContext+0xbc>)
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	607b      	str	r3, [r7, #4]
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	e7fd      	b.n	8003b16 <vTaskSwitchContext+0x5a>
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4a14      	ldr	r2, [pc, #80]	@ (8003b78 <vTaskSwitchContext+0xbc>)
 8003b26:	4413      	add	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	605a      	str	r2, [r3, #4]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d104      	bne.n	8003b4a <vTaskSwitchContext+0x8e>
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	@ (8003b7c <vTaskSwitchContext+0xc0>)
 8003b52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b54:	4b09      	ldr	r3, [pc, #36]	@ (8003b7c <vTaskSwitchContext+0xc0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	334c      	adds	r3, #76	@ 0x4c
 8003b5a:	4a09      	ldr	r2, [pc, #36]	@ (8003b80 <vTaskSwitchContext+0xc4>)
 8003b5c:	6013      	str	r3, [r2, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	200004e8 	.word	0x200004e8
 8003b70:	200004d4 	.word	0x200004d4
 8003b74:	200004c8 	.word	0x200004c8
 8003b78:	200003c4 	.word	0x200003c4
 8003b7c:	200003c0 	.word	0x200003c0
 8003b80:	20000010 	.word	0x20000010

08003b84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	60fb      	str	r3, [r7, #12]
}
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
 8003baa:	e7fd      	b.n	8003ba8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bac:	4b07      	ldr	r3, [pc, #28]	@ (8003bcc <vTaskPlaceOnEventList+0x48>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3318      	adds	r3, #24
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7fe fec5 	bl	8002944 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bba:	2101      	movs	r1, #1
 8003bbc:	6838      	ldr	r0, [r7, #0]
 8003bbe:	f000 fb8d 	bl	80042dc <prvAddCurrentTaskToDelayedList>
}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	200003c0 	.word	0x200003c0

08003bd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	60fb      	str	r3, [r7, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	e7fd      	b.n	8003bfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	3318      	adds	r3, #24
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fed7 	bl	80029b6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c08:	4b1d      	ldr	r3, [pc, #116]	@ (8003c80 <xTaskRemoveFromEventList+0xb0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11c      	bne.n	8003c4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fece 	bl	80029b6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1e:	2201      	movs	r2, #1
 8003c20:	409a      	lsls	r2, r3
 8003c22:	4b18      	ldr	r3, [pc, #96]	@ (8003c84 <xTaskRemoveFromEventList+0xb4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	4a16      	ldr	r2, [pc, #88]	@ (8003c84 <xTaskRemoveFromEventList+0xb4>)
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4a13      	ldr	r2, [pc, #76]	@ (8003c88 <xTaskRemoveFromEventList+0xb8>)
 8003c3a:	441a      	add	r2, r3
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f7fe fe5a 	bl	80028fc <vListInsertEnd>
 8003c48:	e005      	b.n	8003c56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	3318      	adds	r3, #24
 8003c4e:	4619      	mov	r1, r3
 8003c50:	480e      	ldr	r0, [pc, #56]	@ (8003c8c <xTaskRemoveFromEventList+0xbc>)
 8003c52:	f7fe fe53 	bl	80028fc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c90 <xTaskRemoveFromEventList+0xc0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d905      	bls.n	8003c70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c64:	2301      	movs	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c68:	4b0a      	ldr	r3, [pc, #40]	@ (8003c94 <xTaskRemoveFromEventList+0xc4>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e001      	b.n	8003c74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c74:	697b      	ldr	r3, [r7, #20]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	200004e8 	.word	0x200004e8
 8003c84:	200004c8 	.word	0x200004c8
 8003c88:	200003c4 	.word	0x200003c4
 8003c8c:	20000480 	.word	0x20000480
 8003c90:	200003c0 	.word	0x200003c0
 8003c94:	200004d4 	.word	0x200004d4

08003c98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <vTaskInternalSetTimeOutState+0x24>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ca8:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <vTaskInternalSetTimeOutState+0x28>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	605a      	str	r2, [r3, #4]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	200004d8 	.word	0x200004d8
 8003cc0:	200004c4 	.word	0x200004c4

08003cc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	613b      	str	r3, [r7, #16]
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10b      	bne.n	8003d0a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	60fb      	str	r3, [r7, #12]
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	e7fd      	b.n	8003d06 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003d0a:	f000 fc7d 	bl	8004608 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d84 <xTaskCheckForTimeOut+0xc0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d26:	d102      	bne.n	8003d2e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
 8003d2c:	e023      	b.n	8003d76 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b15      	ldr	r3, [pc, #84]	@ (8003d88 <xTaskCheckForTimeOut+0xc4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d007      	beq.n	8003d4a <xTaskCheckForTimeOut+0x86>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d302      	bcc.n	8003d4a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	61fb      	str	r3, [r7, #28]
 8003d48:	e015      	b.n	8003d76 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d20b      	bcs.n	8003d6c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	1ad2      	subs	r2, r2, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff99 	bl	8003c98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	e004      	b.n	8003d76 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d72:	2301      	movs	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d76:	f000 fc79 	bl	800466c <vPortExitCritical>

	return xReturn;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	200004c4 	.word	0x200004c4
 8003d88:	200004d8 	.word	0x200004d8

08003d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d90:	4b03      	ldr	r3, [pc, #12]	@ (8003da0 <vTaskMissedYield+0x14>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
}
 8003d96:	bf00      	nop
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	200004d4 	.word	0x200004d4

08003da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003dac:	f000 f852 	bl	8003e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003db0:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <prvIdleTask+0x28>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d9f9      	bls.n	8003dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <prvIdleTask+0x2c>)
 8003dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003dc8:	e7f0      	b.n	8003dac <prvIdleTask+0x8>
 8003dca:	bf00      	nop
 8003dcc:	200003c4 	.word	0x200003c4
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dda:	2300      	movs	r3, #0
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	e00c      	b.n	8003dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4a12      	ldr	r2, [pc, #72]	@ (8003e34 <prvInitialiseTaskLists+0x60>)
 8003dec:	4413      	add	r3, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fd57 	bl	80028a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3301      	adds	r3, #1
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b06      	cmp	r3, #6
 8003dfe:	d9ef      	bls.n	8003de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e00:	480d      	ldr	r0, [pc, #52]	@ (8003e38 <prvInitialiseTaskLists+0x64>)
 8003e02:	f7fe fd4e 	bl	80028a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e06:	480d      	ldr	r0, [pc, #52]	@ (8003e3c <prvInitialiseTaskLists+0x68>)
 8003e08:	f7fe fd4b 	bl	80028a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e0c:	480c      	ldr	r0, [pc, #48]	@ (8003e40 <prvInitialiseTaskLists+0x6c>)
 8003e0e:	f7fe fd48 	bl	80028a2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e12:	480c      	ldr	r0, [pc, #48]	@ (8003e44 <prvInitialiseTaskLists+0x70>)
 8003e14:	f7fe fd45 	bl	80028a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e18:	480b      	ldr	r0, [pc, #44]	@ (8003e48 <prvInitialiseTaskLists+0x74>)
 8003e1a:	f7fe fd42 	bl	80028a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <prvInitialiseTaskLists+0x78>)
 8003e20:	4a05      	ldr	r2, [pc, #20]	@ (8003e38 <prvInitialiseTaskLists+0x64>)
 8003e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e24:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <prvInitialiseTaskLists+0x7c>)
 8003e26:	4a05      	ldr	r2, [pc, #20]	@ (8003e3c <prvInitialiseTaskLists+0x68>)
 8003e28:	601a      	str	r2, [r3, #0]
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200003c4 	.word	0x200003c4
 8003e38:	20000450 	.word	0x20000450
 8003e3c:	20000464 	.word	0x20000464
 8003e40:	20000480 	.word	0x20000480
 8003e44:	20000494 	.word	0x20000494
 8003e48:	200004ac 	.word	0x200004ac
 8003e4c:	20000478 	.word	0x20000478
 8003e50:	2000047c 	.word	0x2000047c

08003e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e5a:	e019      	b.n	8003e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e5c:	f000 fbd4 	bl	8004608 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e60:	4b10      	ldr	r3, [pc, #64]	@ (8003ea4 <prvCheckTasksWaitingTermination+0x50>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fe fda2 	bl	80029b6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea8 <prvCheckTasksWaitingTermination+0x54>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ea8 <prvCheckTasksWaitingTermination+0x54>)
 8003e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <prvCheckTasksWaitingTermination+0x58>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	4a0a      	ldr	r2, [pc, #40]	@ (8003eac <prvCheckTasksWaitingTermination+0x58>)
 8003e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e86:	f000 fbf1 	bl	800466c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f810 	bl	8003eb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e90:	4b06      	ldr	r3, [pc, #24]	@ (8003eac <prvCheckTasksWaitingTermination+0x58>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e1      	bne.n	8003e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000494 	.word	0x20000494
 8003ea8:	200004c0 	.word	0x200004c0
 8003eac:	200004a8 	.word	0x200004a8

08003eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	334c      	adds	r3, #76	@ 0x4c
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fe9f 	bl	8004c00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d108      	bne.n	8003ede <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fd47 	bl	8004964 <vPortFree>
				vPortFree( pxTCB );
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fd44 	bl	8004964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003edc:	e019      	b.n	8003f12 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d103      	bne.n	8003ef0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fd3b 	bl	8004964 <vPortFree>
	}
 8003eee:	e010      	b.n	8003f12 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d00b      	beq.n	8003f12 <prvDeleteTCB+0x62>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	60fb      	str	r3, [r7, #12]
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	e7fd      	b.n	8003f0e <prvDeleteTCB+0x5e>
	}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f22:	4b0c      	ldr	r3, [pc, #48]	@ (8003f54 <prvResetNextTaskUnblockTime+0x38>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d104      	bne.n	8003f36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f58 <prvResetNextTaskUnblockTime+0x3c>)
 8003f2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f34:	e008      	b.n	8003f48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f36:	4b07      	ldr	r3, [pc, #28]	@ (8003f54 <prvResetNextTaskUnblockTime+0x38>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4a04      	ldr	r2, [pc, #16]	@ (8003f58 <prvResetNextTaskUnblockTime+0x3c>)
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	20000478 	.word	0x20000478
 8003f58:	200004e0 	.word	0x200004e0

08003f5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f62:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <xTaskGetSchedulerState+0x34>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	e008      	b.n	8003f82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f70:	4b08      	ldr	r3, [pc, #32]	@ (8003f94 <xTaskGetSchedulerState+0x38>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	607b      	str	r3, [r7, #4]
 8003f7c:	e001      	b.n	8003f82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f82:	687b      	ldr	r3, [r7, #4]
	}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	200004cc 	.word	0x200004cc
 8003f94:	200004e8 	.word	0x200004e8

08003f98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d05e      	beq.n	800406c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb2:	4b31      	ldr	r3, [pc, #196]	@ (8004078 <xTaskPriorityInherit+0xe0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d24e      	bcs.n	800405a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	db06      	blt.n	8003fd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8004078 <xTaskPriorityInherit+0xe0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	f1c3 0207 	rsb	r2, r3, #7
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6959      	ldr	r1, [r3, #20]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4a26      	ldr	r2, [pc, #152]	@ (800407c <xTaskPriorityInherit+0xe4>)
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4299      	cmp	r1, r3
 8003fe8:	d12f      	bne.n	800404a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3304      	adds	r3, #4
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fce1 	bl	80029b6 <uxListRemove>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	2201      	movs	r2, #1
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43da      	mvns	r2, r3
 8004006:	4b1e      	ldr	r3, [pc, #120]	@ (8004080 <xTaskPriorityInherit+0xe8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4013      	ands	r3, r2
 800400c:	4a1c      	ldr	r2, [pc, #112]	@ (8004080 <xTaskPriorityInherit+0xe8>)
 800400e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004010:	4b19      	ldr	r3, [pc, #100]	@ (8004078 <xTaskPriorityInherit+0xe0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401e:	2201      	movs	r2, #1
 8004020:	409a      	lsls	r2, r3
 8004022:	4b17      	ldr	r3, [pc, #92]	@ (8004080 <xTaskPriorityInherit+0xe8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4313      	orrs	r3, r2
 8004028:	4a15      	ldr	r2, [pc, #84]	@ (8004080 <xTaskPriorityInherit+0xe8>)
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4a10      	ldr	r2, [pc, #64]	@ (800407c <xTaskPriorityInherit+0xe4>)
 800403a:	441a      	add	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	3304      	adds	r3, #4
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f7fe fc5a 	bl	80028fc <vListInsertEnd>
 8004048:	e004      	b.n	8004054 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800404a:	4b0b      	ldr	r3, [pc, #44]	@ (8004078 <xTaskPriorityInherit+0xe0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004054:	2301      	movs	r3, #1
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	e008      	b.n	800406c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800405e:	4b06      	ldr	r3, [pc, #24]	@ (8004078 <xTaskPriorityInherit+0xe0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	429a      	cmp	r2, r3
 8004066:	d201      	bcs.n	800406c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004068:	2301      	movs	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800406c:	68fb      	ldr	r3, [r7, #12]
	}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200003c0 	.word	0x200003c0
 800407c:	200003c4 	.word	0x200003c4
 8004080:	200004c8 	.word	0x200004c8

08004084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d070      	beq.n	800417c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800409a:	4b3b      	ldr	r3, [pc, #236]	@ (8004188 <xTaskPriorityDisinherit+0x104>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d00b      	beq.n	80040bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	60fb      	str	r3, [r7, #12]
}
 80040b6:	bf00      	nop
 80040b8:	bf00      	nop
 80040ba:	e7fd      	b.n	80040b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	60bb      	str	r3, [r7, #8]
}
 80040d6:	bf00      	nop
 80040d8:	bf00      	nop
 80040da:	e7fd      	b.n	80040d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040e0:	1e5a      	subs	r2, r3, #1
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d044      	beq.n	800417c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d140      	bne.n	800417c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fc59 	bl	80029b6 <uxListRemove>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d115      	bne.n	8004136 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410e:	491f      	ldr	r1, [pc, #124]	@ (800418c <xTaskPriorityDisinherit+0x108>)
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <xTaskPriorityDisinherit+0xb2>
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004124:	2201      	movs	r2, #1
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43da      	mvns	r2, r3
 800412c:	4b18      	ldr	r3, [pc, #96]	@ (8004190 <xTaskPriorityDisinherit+0x10c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4013      	ands	r3, r2
 8004132:	4a17      	ldr	r2, [pc, #92]	@ (8004190 <xTaskPriorityDisinherit+0x10c>)
 8004134:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	f1c3 0207 	rsb	r2, r3, #7
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414e:	2201      	movs	r2, #1
 8004150:	409a      	lsls	r2, r3
 8004152:	4b0f      	ldr	r3, [pc, #60]	@ (8004190 <xTaskPriorityDisinherit+0x10c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4313      	orrs	r3, r2
 8004158:	4a0d      	ldr	r2, [pc, #52]	@ (8004190 <xTaskPriorityDisinherit+0x10c>)
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4a08      	ldr	r2, [pc, #32]	@ (800418c <xTaskPriorityDisinherit+0x108>)
 800416a:	441a      	add	r2, r3
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	3304      	adds	r3, #4
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f7fe fbc2 	bl	80028fc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004178:	2301      	movs	r3, #1
 800417a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800417c:	697b      	ldr	r3, [r7, #20]
	}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	200003c0 	.word	0x200003c0
 800418c:	200003c4 	.word	0x200003c4
 8004190:	200004c8 	.word	0x200004c8

08004194 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80041a2:	2301      	movs	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d079      	beq.n	80042a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10b      	bne.n	80041cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	60fb      	str	r3, [r7, #12]
}
 80041c6:	bf00      	nop
 80041c8:	bf00      	nop
 80041ca:	e7fd      	b.n	80041c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d902      	bls.n	80041dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e002      	b.n	80041e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d059      	beq.n	80042a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d154      	bne.n	80042a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80041f6:	4b2c      	ldr	r3, [pc, #176]	@ (80042a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d10b      	bne.n	8004218 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	60bb      	str	r3, [r7, #8]
}
 8004212:	bf00      	nop
 8004214:	bf00      	nop
 8004216:	e7fd      	b.n	8004214 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	db04      	blt.n	8004236 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f1c3 0207 	rsb	r2, r3, #7
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	6959      	ldr	r1, [r3, #20]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4a19      	ldr	r2, [pc, #100]	@ (80042ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004246:	4413      	add	r3, r2
 8004248:	4299      	cmp	r1, r3
 800424a:	d129      	bne.n	80042a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	3304      	adds	r3, #4
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe fbb0 	bl	80029b6 <uxListRemove>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004260:	2201      	movs	r2, #1
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43da      	mvns	r2, r3
 8004268:	4b11      	ldr	r3, [pc, #68]	@ (80042b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4013      	ands	r3, r2
 800426e:	4a10      	ldr	r2, [pc, #64]	@ (80042b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004270:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	2201      	movs	r2, #1
 8004278:	409a      	lsls	r2, r3
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	4a0b      	ldr	r2, [pc, #44]	@ (80042b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4a06      	ldr	r2, [pc, #24]	@ (80042ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004292:	441a      	add	r2, r3
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f7fe fb2e 	bl	80028fc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042a0:	bf00      	nop
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	200003c0 	.word	0x200003c0
 80042ac:	200003c4 	.word	0x200003c4
 80042b0:	200004c8 	.word	0x200004c8

080042b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80042b8:	4b07      	ldr	r3, [pc, #28]	@ (80042d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80042c0:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042c6:	3201      	adds	r2, #1
 80042c8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80042ca:	4b03      	ldr	r3, [pc, #12]	@ (80042d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80042cc:	681b      	ldr	r3, [r3, #0]
	}
 80042ce:	4618      	mov	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	200003c0 	.word	0x200003c0

080042dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042e6:	4b29      	ldr	r3, [pc, #164]	@ (800438c <prvAddCurrentTaskToDelayedList+0xb0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ec:	4b28      	ldr	r3, [pc, #160]	@ (8004390 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fb5f 	bl	80029b6 <uxListRemove>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10b      	bne.n	8004316 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80042fe:	4b24      	ldr	r3, [pc, #144]	@ (8004390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	2201      	movs	r2, #1
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43da      	mvns	r2, r3
 800430c:	4b21      	ldr	r3, [pc, #132]	@ (8004394 <prvAddCurrentTaskToDelayedList+0xb8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4013      	ands	r3, r2
 8004312:	4a20      	ldr	r2, [pc, #128]	@ (8004394 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004314:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800431c:	d10a      	bne.n	8004334 <prvAddCurrentTaskToDelayedList+0x58>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004324:	4b1a      	ldr	r3, [pc, #104]	@ (8004390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3304      	adds	r3, #4
 800432a:	4619      	mov	r1, r3
 800432c:	481a      	ldr	r0, [pc, #104]	@ (8004398 <prvAddCurrentTaskToDelayedList+0xbc>)
 800432e:	f7fe fae5 	bl	80028fc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004332:	e026      	b.n	8004382 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800433c:	4b14      	ldr	r3, [pc, #80]	@ (8004390 <prvAddCurrentTaskToDelayedList+0xb4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	429a      	cmp	r2, r3
 800434a:	d209      	bcs.n	8004360 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800434c:	4b13      	ldr	r3, [pc, #76]	@ (800439c <prvAddCurrentTaskToDelayedList+0xc0>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b0f      	ldr	r3, [pc, #60]	@ (8004390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3304      	adds	r3, #4
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f7fe faf3 	bl	8002944 <vListInsert>
}
 800435e:	e010      	b.n	8004382 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004360:	4b0f      	ldr	r3, [pc, #60]	@ (80043a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b0a      	ldr	r3, [pc, #40]	@ (8004390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3304      	adds	r3, #4
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f7fe fae9 	bl	8002944 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004372:	4b0c      	ldr	r3, [pc, #48]	@ (80043a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	429a      	cmp	r2, r3
 800437a:	d202      	bcs.n	8004382 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800437c:	4a09      	ldr	r2, [pc, #36]	@ (80043a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6013      	str	r3, [r2, #0]
}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	200004c4 	.word	0x200004c4
 8004390:	200003c0 	.word	0x200003c0
 8004394:	200004c8 	.word	0x200004c8
 8004398:	200004ac 	.word	0x200004ac
 800439c:	2000047c 	.word	0x2000047c
 80043a0:	20000478 	.word	0x20000478
 80043a4:	200004e0 	.word	0x200004e0

080043a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3b04      	subs	r3, #4
 80043b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3b04      	subs	r3, #4
 80043c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f023 0201 	bic.w	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3b04      	subs	r3, #4
 80043d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043d8:	4a0c      	ldr	r2, [pc, #48]	@ (800440c <pxPortInitialiseStack+0x64>)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3b14      	subs	r3, #20
 80043e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3b04      	subs	r3, #4
 80043ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f06f 0202 	mvn.w	r2, #2
 80043f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3b20      	subs	r3, #32
 80043fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043fe:	68fb      	ldr	r3, [r7, #12]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	08004411 	.word	0x08004411

08004410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800441a:	4b13      	ldr	r3, [pc, #76]	@ (8004468 <prvTaskExitError+0x58>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004422:	d00b      	beq.n	800443c <prvTaskExitError+0x2c>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	60fb      	str	r3, [r7, #12]
}
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	e7fd      	b.n	8004438 <prvTaskExitError+0x28>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60bb      	str	r3, [r7, #8]
}
 800444e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004450:	bf00      	nop
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0fc      	beq.n	8004452 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004458:	bf00      	nop
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	2000000c 	.word	0x2000000c
 800446c:	00000000 	.word	0x00000000

08004470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004470:	4b07      	ldr	r3, [pc, #28]	@ (8004490 <pxCurrentTCBConst2>)
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	6808      	ldr	r0, [r1, #0]
 8004476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447a:	f380 8809 	msr	PSP, r0
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8811 	msr	BASEPRI, r0
 800448a:	4770      	bx	lr
 800448c:	f3af 8000 	nop.w

08004490 <pxCurrentTCBConst2>:
 8004490:	200003c0 	.word	0x200003c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop

08004498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004498:	4808      	ldr	r0, [pc, #32]	@ (80044bc <prvPortStartFirstTask+0x24>)
 800449a:	6800      	ldr	r0, [r0, #0]
 800449c:	6800      	ldr	r0, [r0, #0]
 800449e:	f380 8808 	msr	MSP, r0
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f380 8814 	msr	CONTROL, r0
 80044aa:	b662      	cpsie	i
 80044ac:	b661      	cpsie	f
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	df00      	svc	0
 80044b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044ba:	bf00      	nop
 80044bc:	e000ed08 	.word	0xe000ed08

080044c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044c6:	4b47      	ldr	r3, [pc, #284]	@ (80045e4 <xPortStartScheduler+0x124>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a47      	ldr	r2, [pc, #284]	@ (80045e8 <xPortStartScheduler+0x128>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d10b      	bne.n	80044e8 <xPortStartScheduler+0x28>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	60fb      	str	r3, [r7, #12]
}
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044e8:	4b3e      	ldr	r3, [pc, #248]	@ (80045e4 <xPortStartScheduler+0x124>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a3f      	ldr	r2, [pc, #252]	@ (80045ec <xPortStartScheduler+0x12c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d10b      	bne.n	800450a <xPortStartScheduler+0x4a>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	613b      	str	r3, [r7, #16]
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800450a:	4b39      	ldr	r3, [pc, #228]	@ (80045f0 <xPortStartScheduler+0x130>)
 800450c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	22ff      	movs	r2, #255	@ 0xff
 800451a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800452c:	b2da      	uxtb	r2, r3
 800452e:	4b31      	ldr	r3, [pc, #196]	@ (80045f4 <xPortStartScheduler+0x134>)
 8004530:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004532:	4b31      	ldr	r3, [pc, #196]	@ (80045f8 <xPortStartScheduler+0x138>)
 8004534:	2207      	movs	r2, #7
 8004536:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004538:	e009      	b.n	800454e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800453a:	4b2f      	ldr	r3, [pc, #188]	@ (80045f8 <xPortStartScheduler+0x138>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3b01      	subs	r3, #1
 8004540:	4a2d      	ldr	r2, [pc, #180]	@ (80045f8 <xPortStartScheduler+0x138>)
 8004542:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	b2db      	uxtb	r3, r3
 800454c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004556:	2b80      	cmp	r3, #128	@ 0x80
 8004558:	d0ef      	beq.n	800453a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800455a:	4b27      	ldr	r3, [pc, #156]	@ (80045f8 <xPortStartScheduler+0x138>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1c3 0307 	rsb	r3, r3, #7
 8004562:	2b04      	cmp	r3, #4
 8004564:	d00b      	beq.n	800457e <xPortStartScheduler+0xbe>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	60bb      	str	r3, [r7, #8]
}
 8004578:	bf00      	nop
 800457a:	bf00      	nop
 800457c:	e7fd      	b.n	800457a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800457e:	4b1e      	ldr	r3, [pc, #120]	@ (80045f8 <xPortStartScheduler+0x138>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	4a1c      	ldr	r2, [pc, #112]	@ (80045f8 <xPortStartScheduler+0x138>)
 8004586:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004588:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <xPortStartScheduler+0x138>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004590:	4a19      	ldr	r2, [pc, #100]	@ (80045f8 <xPortStartScheduler+0x138>)
 8004592:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800459c:	4b17      	ldr	r3, [pc, #92]	@ (80045fc <xPortStartScheduler+0x13c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a16      	ldr	r2, [pc, #88]	@ (80045fc <xPortStartScheduler+0x13c>)
 80045a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045a8:	4b14      	ldr	r3, [pc, #80]	@ (80045fc <xPortStartScheduler+0x13c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a13      	ldr	r2, [pc, #76]	@ (80045fc <xPortStartScheduler+0x13c>)
 80045ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80045b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045b4:	f000 f8da 	bl	800476c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045b8:	4b11      	ldr	r3, [pc, #68]	@ (8004600 <xPortStartScheduler+0x140>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045be:	f000 f8f9 	bl	80047b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045c2:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <xPortStartScheduler+0x144>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004604 <xPortStartScheduler+0x144>)
 80045c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80045cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045ce:	f7ff ff63 	bl	8004498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045d2:	f7ff fa73 	bl	8003abc <vTaskSwitchContext>
	prvTaskExitError();
 80045d6:	f7ff ff1b 	bl	8004410 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	e000ed00 	.word	0xe000ed00
 80045e8:	410fc271 	.word	0x410fc271
 80045ec:	410fc270 	.word	0x410fc270
 80045f0:	e000e400 	.word	0xe000e400
 80045f4:	200004ec 	.word	0x200004ec
 80045f8:	200004f0 	.word	0x200004f0
 80045fc:	e000ed20 	.word	0xe000ed20
 8004600:	2000000c 	.word	0x2000000c
 8004604:	e000ef34 	.word	0xe000ef34

08004608 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	607b      	str	r3, [r7, #4]
}
 8004620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004622:	4b10      	ldr	r3, [pc, #64]	@ (8004664 <vPortEnterCritical+0x5c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3301      	adds	r3, #1
 8004628:	4a0e      	ldr	r2, [pc, #56]	@ (8004664 <vPortEnterCritical+0x5c>)
 800462a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800462c:	4b0d      	ldr	r3, [pc, #52]	@ (8004664 <vPortEnterCritical+0x5c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d110      	bne.n	8004656 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004634:	4b0c      	ldr	r3, [pc, #48]	@ (8004668 <vPortEnterCritical+0x60>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00b      	beq.n	8004656 <vPortEnterCritical+0x4e>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	603b      	str	r3, [r7, #0]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <vPortEnterCritical+0x4a>
	}
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	2000000c 	.word	0x2000000c
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004672:	4b12      	ldr	r3, [pc, #72]	@ (80046bc <vPortExitCritical+0x50>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10b      	bne.n	8004692 <vPortExitCritical+0x26>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	607b      	str	r3, [r7, #4]
}
 800468c:	bf00      	nop
 800468e:	bf00      	nop
 8004690:	e7fd      	b.n	800468e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004692:	4b0a      	ldr	r3, [pc, #40]	@ (80046bc <vPortExitCritical+0x50>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3b01      	subs	r3, #1
 8004698:	4a08      	ldr	r2, [pc, #32]	@ (80046bc <vPortExitCritical+0x50>)
 800469a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800469c:	4b07      	ldr	r3, [pc, #28]	@ (80046bc <vPortExitCritical+0x50>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <vPortExitCritical+0x44>
 80046a4:	2300      	movs	r3, #0
 80046a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	2000000c 	.word	0x2000000c

080046c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046c0:	f3ef 8009 	mrs	r0, PSP
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	4b15      	ldr	r3, [pc, #84]	@ (8004720 <pxCurrentTCBConst>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	f01e 0f10 	tst.w	lr, #16
 80046d0:	bf08      	it	eq
 80046d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046da:	6010      	str	r0, [r2, #0]
 80046dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80046e4:	f380 8811 	msr	BASEPRI, r0
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f7ff f9e4 	bl	8003abc <vTaskSwitchContext>
 80046f4:	f04f 0000 	mov.w	r0, #0
 80046f8:	f380 8811 	msr	BASEPRI, r0
 80046fc:	bc09      	pop	{r0, r3}
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	6808      	ldr	r0, [r1, #0]
 8004702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004706:	f01e 0f10 	tst.w	lr, #16
 800470a:	bf08      	it	eq
 800470c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004710:	f380 8809 	msr	PSP, r0
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	f3af 8000 	nop.w

08004720 <pxCurrentTCBConst>:
 8004720:	200003c0 	.word	0x200003c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop

08004728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	607b      	str	r3, [r7, #4]
}
 8004740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004742:	f7ff f901 	bl	8003948 <xTaskIncrementTick>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800474c:	4b06      	ldr	r3, [pc, #24]	@ (8004768 <SysTick_Handler+0x40>)
 800474e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f383 8811 	msr	BASEPRI, r3
}
 800475e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004770:	4b0b      	ldr	r3, [pc, #44]	@ (80047a0 <vPortSetupTimerInterrupt+0x34>)
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004776:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <vPortSetupTimerInterrupt+0x38>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800477c:	4b0a      	ldr	r3, [pc, #40]	@ (80047a8 <vPortSetupTimerInterrupt+0x3c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a0a      	ldr	r2, [pc, #40]	@ (80047ac <vPortSetupTimerInterrupt+0x40>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	099b      	lsrs	r3, r3, #6
 8004788:	4a09      	ldr	r2, [pc, #36]	@ (80047b0 <vPortSetupTimerInterrupt+0x44>)
 800478a:	3b01      	subs	r3, #1
 800478c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800478e:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <vPortSetupTimerInterrupt+0x34>)
 8004790:	2207      	movs	r2, #7
 8004792:	601a      	str	r2, [r3, #0]
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	e000e010 	.word	0xe000e010
 80047a4:	e000e018 	.word	0xe000e018
 80047a8:	20000000 	.word	0x20000000
 80047ac:	10624dd3 	.word	0x10624dd3
 80047b0:	e000e014 	.word	0xe000e014

080047b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80047c4 <vPortEnableVFP+0x10>
 80047b8:	6801      	ldr	r1, [r0, #0]
 80047ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80047be:	6001      	str	r1, [r0, #0]
 80047c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80047c2:	bf00      	nop
 80047c4:	e000ed88 	.word	0xe000ed88

080047c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	@ 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047d4:	f7ff f80c 	bl	80037f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047d8:	4b5c      	ldr	r3, [pc, #368]	@ (800494c <pvPortMalloc+0x184>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047e0:	f000 f924 	bl	8004a2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004950 <pvPortMalloc+0x188>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f040 8095 	bne.w	800491c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01e      	beq.n	8004836 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80047f8:	2208      	movs	r2, #8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	2b00      	cmp	r3, #0
 8004808:	d015      	beq.n	8004836 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f023 0307 	bic.w	r3, r3, #7
 8004810:	3308      	adds	r3, #8
 8004812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <pvPortMalloc+0x6e>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	617b      	str	r3, [r7, #20]
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	e7fd      	b.n	8004832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d06f      	beq.n	800491c <pvPortMalloc+0x154>
 800483c:	4b45      	ldr	r3, [pc, #276]	@ (8004954 <pvPortMalloc+0x18c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d86a      	bhi.n	800491c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004846:	4b44      	ldr	r3, [pc, #272]	@ (8004958 <pvPortMalloc+0x190>)
 8004848:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800484a:	4b43      	ldr	r3, [pc, #268]	@ (8004958 <pvPortMalloc+0x190>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004850:	e004      	b.n	800485c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	429a      	cmp	r2, r3
 8004864:	d903      	bls.n	800486e <pvPortMalloc+0xa6>
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f1      	bne.n	8004852 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800486e:	4b37      	ldr	r3, [pc, #220]	@ (800494c <pvPortMalloc+0x184>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004874:	429a      	cmp	r2, r3
 8004876:	d051      	beq.n	800491c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2208      	movs	r2, #8
 800487e:	4413      	add	r3, r2
 8004880:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	1ad2      	subs	r2, r2, r3
 8004892:	2308      	movs	r3, #8
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	429a      	cmp	r2, r3
 8004898:	d920      	bls.n	80048dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800489a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4413      	add	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00b      	beq.n	80048c4 <pvPortMalloc+0xfc>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	613b      	str	r3, [r7, #16]
}
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048d6:	69b8      	ldr	r0, [r7, #24]
 80048d8:	f000 f90a 	bl	8004af0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004954 <pvPortMalloc+0x18c>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <pvPortMalloc+0x18c>)
 80048e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004954 <pvPortMalloc+0x18c>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b1b      	ldr	r3, [pc, #108]	@ (800495c <pvPortMalloc+0x194>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d203      	bcs.n	80048fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048f6:	4b17      	ldr	r3, [pc, #92]	@ (8004954 <pvPortMalloc+0x18c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a18      	ldr	r2, [pc, #96]	@ (800495c <pvPortMalloc+0x194>)
 80048fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	4b13      	ldr	r3, [pc, #76]	@ (8004950 <pvPortMalloc+0x188>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	431a      	orrs	r2, r3
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800490c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004912:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <pvPortMalloc+0x198>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3301      	adds	r3, #1
 8004918:	4a11      	ldr	r2, [pc, #68]	@ (8004960 <pvPortMalloc+0x198>)
 800491a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800491c:	f7fe ff76 	bl	800380c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <pvPortMalloc+0x17a>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	60fb      	str	r3, [r7, #12]
}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	e7fd      	b.n	800493e <pvPortMalloc+0x176>
	return pvReturn;
 8004942:	69fb      	ldr	r3, [r7, #28]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3728      	adds	r7, #40	@ 0x28
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	200040fc 	.word	0x200040fc
 8004950:	20004110 	.word	0x20004110
 8004954:	20004100 	.word	0x20004100
 8004958:	200040f4 	.word	0x200040f4
 800495c:	20004104 	.word	0x20004104
 8004960:	20004108 	.word	0x20004108

08004964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d04f      	beq.n	8004a16 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004976:	2308      	movs	r3, #8
 8004978:	425b      	negs	r3, r3
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4413      	add	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	4b25      	ldr	r3, [pc, #148]	@ (8004a20 <vPortFree+0xbc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4013      	ands	r3, r2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10b      	bne.n	80049aa <vPortFree+0x46>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	60fb      	str	r3, [r7, #12]
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	e7fd      	b.n	80049a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <vPortFree+0x66>
	__asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	60bb      	str	r3, [r7, #8]
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	e7fd      	b.n	80049c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	4b14      	ldr	r3, [pc, #80]	@ (8004a20 <vPortFree+0xbc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01e      	beq.n	8004a16 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d11a      	bne.n	8004a16 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a20 <vPortFree+0xbc>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	401a      	ands	r2, r3
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049f0:	f7fe fefe 	bl	80037f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a24 <vPortFree+0xc0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4413      	add	r3, r2
 80049fe:	4a09      	ldr	r2, [pc, #36]	@ (8004a24 <vPortFree+0xc0>)
 8004a00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a02:	6938      	ldr	r0, [r7, #16]
 8004a04:	f000 f874 	bl	8004af0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a08:	4b07      	ldr	r3, [pc, #28]	@ (8004a28 <vPortFree+0xc4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	4a06      	ldr	r2, [pc, #24]	@ (8004a28 <vPortFree+0xc4>)
 8004a10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a12:	f7fe fefb 	bl	800380c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a16:	bf00      	nop
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20004110 	.word	0x20004110
 8004a24:	20004100 	.word	0x20004100
 8004a28:	2000410c 	.word	0x2000410c

08004a2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a32:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004a36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a38:	4b27      	ldr	r3, [pc, #156]	@ (8004ad8 <prvHeapInit+0xac>)
 8004a3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00c      	beq.n	8004a60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3307      	adds	r3, #7
 8004a4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0307 	bic.w	r3, r3, #7
 8004a52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad8 <prvHeapInit+0xac>)
 8004a5c:	4413      	add	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a64:	4a1d      	ldr	r2, [pc, #116]	@ (8004adc <prvHeapInit+0xb0>)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004adc <prvHeapInit+0xb0>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	4413      	add	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a78:	2208      	movs	r2, #8
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0307 	bic.w	r3, r3, #7
 8004a86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ae0 <prvHeapInit+0xb4>)
 8004a8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a8e:	4b14      	ldr	r3, [pc, #80]	@ (8004ae0 <prvHeapInit+0xb4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a96:	4b12      	ldr	r3, [pc, #72]	@ (8004ae0 <prvHeapInit+0xb4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004aac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae0 <prvHeapInit+0xb4>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae4 <prvHeapInit+0xb8>)
 8004aba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4a09      	ldr	r2, [pc, #36]	@ (8004ae8 <prvHeapInit+0xbc>)
 8004ac2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ac4:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <prvHeapInit+0xc0>)
 8004ac6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004aca:	601a      	str	r2, [r3, #0]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	200004f4 	.word	0x200004f4
 8004adc:	200040f4 	.word	0x200040f4
 8004ae0:	200040fc 	.word	0x200040fc
 8004ae4:	20004104 	.word	0x20004104
 8004ae8:	20004100 	.word	0x20004100
 8004aec:	20004110 	.word	0x20004110

08004af0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004af8:	4b28      	ldr	r3, [pc, #160]	@ (8004b9c <prvInsertBlockIntoFreeList+0xac>)
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	e002      	b.n	8004b04 <prvInsertBlockIntoFreeList+0x14>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d8f7      	bhi.n	8004afe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4413      	add	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d108      	bne.n	8004b32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	441a      	add	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	441a      	add	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d118      	bne.n	8004b78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <prvInsertBlockIntoFreeList+0xb0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d00d      	beq.n	8004b6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	441a      	add	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e008      	b.n	8004b80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba0 <prvInsertBlockIntoFreeList+0xb0>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e003      	b.n	8004b80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d002      	beq.n	8004b8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	200040f4 	.word	0x200040f4
 8004ba0:	200040fc 	.word	0x200040fc

08004ba4 <memset>:
 8004ba4:	4402      	add	r2, r0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d100      	bne.n	8004bae <memset+0xa>
 8004bac:	4770      	bx	lr
 8004bae:	f803 1b01 	strb.w	r1, [r3], #1
 8004bb2:	e7f9      	b.n	8004ba8 <memset+0x4>

08004bb4 <__libc_init_array>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	4d0d      	ldr	r5, [pc, #52]	@ (8004bec <__libc_init_array+0x38>)
 8004bb8:	4c0d      	ldr	r4, [pc, #52]	@ (8004bf0 <__libc_init_array+0x3c>)
 8004bba:	1b64      	subs	r4, r4, r5
 8004bbc:	10a4      	asrs	r4, r4, #2
 8004bbe:	2600      	movs	r6, #0
 8004bc0:	42a6      	cmp	r6, r4
 8004bc2:	d109      	bne.n	8004bd8 <__libc_init_array+0x24>
 8004bc4:	4d0b      	ldr	r5, [pc, #44]	@ (8004bf4 <__libc_init_array+0x40>)
 8004bc6:	4c0c      	ldr	r4, [pc, #48]	@ (8004bf8 <__libc_init_array+0x44>)
 8004bc8:	f000 f8dc 	bl	8004d84 <_init>
 8004bcc:	1b64      	subs	r4, r4, r5
 8004bce:	10a4      	asrs	r4, r4, #2
 8004bd0:	2600      	movs	r6, #0
 8004bd2:	42a6      	cmp	r6, r4
 8004bd4:	d105      	bne.n	8004be2 <__libc_init_array+0x2e>
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bdc:	4798      	blx	r3
 8004bde:	3601      	adds	r6, #1
 8004be0:	e7ee      	b.n	8004bc0 <__libc_init_array+0xc>
 8004be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be6:	4798      	blx	r3
 8004be8:	3601      	adds	r6, #1
 8004bea:	e7f2      	b.n	8004bd2 <__libc_init_array+0x1e>
 8004bec:	08004e64 	.word	0x08004e64
 8004bf0:	08004e64 	.word	0x08004e64
 8004bf4:	08004e64 	.word	0x08004e64
 8004bf8:	08004e68 	.word	0x08004e68

08004bfc <__retarget_lock_acquire_recursive>:
 8004bfc:	4770      	bx	lr

08004bfe <__retarget_lock_release_recursive>:
 8004bfe:	4770      	bx	lr

08004c00 <_reclaim_reent>:
 8004c00:	4b2d      	ldr	r3, [pc, #180]	@ (8004cb8 <_reclaim_reent+0xb8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4283      	cmp	r3, r0
 8004c06:	b570      	push	{r4, r5, r6, lr}
 8004c08:	4604      	mov	r4, r0
 8004c0a:	d053      	beq.n	8004cb4 <_reclaim_reent+0xb4>
 8004c0c:	69c3      	ldr	r3, [r0, #28]
 8004c0e:	b31b      	cbz	r3, 8004c58 <_reclaim_reent+0x58>
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	b163      	cbz	r3, 8004c2e <_reclaim_reent+0x2e>
 8004c14:	2500      	movs	r5, #0
 8004c16:	69e3      	ldr	r3, [r4, #28]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	5959      	ldr	r1, [r3, r5]
 8004c1c:	b9b1      	cbnz	r1, 8004c4c <_reclaim_reent+0x4c>
 8004c1e:	3504      	adds	r5, #4
 8004c20:	2d80      	cmp	r5, #128	@ 0x80
 8004c22:	d1f8      	bne.n	8004c16 <_reclaim_reent+0x16>
 8004c24:	69e3      	ldr	r3, [r4, #28]
 8004c26:	4620      	mov	r0, r4
 8004c28:	68d9      	ldr	r1, [r3, #12]
 8004c2a:	f000 f855 	bl	8004cd8 <_free_r>
 8004c2e:	69e3      	ldr	r3, [r4, #28]
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	b111      	cbz	r1, 8004c3a <_reclaim_reent+0x3a>
 8004c34:	4620      	mov	r0, r4
 8004c36:	f000 f84f 	bl	8004cd8 <_free_r>
 8004c3a:	69e3      	ldr	r3, [r4, #28]
 8004c3c:	689d      	ldr	r5, [r3, #8]
 8004c3e:	b15d      	cbz	r5, 8004c58 <_reclaim_reent+0x58>
 8004c40:	4629      	mov	r1, r5
 8004c42:	4620      	mov	r0, r4
 8004c44:	682d      	ldr	r5, [r5, #0]
 8004c46:	f000 f847 	bl	8004cd8 <_free_r>
 8004c4a:	e7f8      	b.n	8004c3e <_reclaim_reent+0x3e>
 8004c4c:	680e      	ldr	r6, [r1, #0]
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f000 f842 	bl	8004cd8 <_free_r>
 8004c54:	4631      	mov	r1, r6
 8004c56:	e7e1      	b.n	8004c1c <_reclaim_reent+0x1c>
 8004c58:	6961      	ldr	r1, [r4, #20]
 8004c5a:	b111      	cbz	r1, 8004c62 <_reclaim_reent+0x62>
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f000 f83b 	bl	8004cd8 <_free_r>
 8004c62:	69e1      	ldr	r1, [r4, #28]
 8004c64:	b111      	cbz	r1, 8004c6c <_reclaim_reent+0x6c>
 8004c66:	4620      	mov	r0, r4
 8004c68:	f000 f836 	bl	8004cd8 <_free_r>
 8004c6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004c6e:	b111      	cbz	r1, 8004c76 <_reclaim_reent+0x76>
 8004c70:	4620      	mov	r0, r4
 8004c72:	f000 f831 	bl	8004cd8 <_free_r>
 8004c76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c78:	b111      	cbz	r1, 8004c80 <_reclaim_reent+0x80>
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f000 f82c 	bl	8004cd8 <_free_r>
 8004c80:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004c82:	b111      	cbz	r1, 8004c8a <_reclaim_reent+0x8a>
 8004c84:	4620      	mov	r0, r4
 8004c86:	f000 f827 	bl	8004cd8 <_free_r>
 8004c8a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004c8c:	b111      	cbz	r1, 8004c94 <_reclaim_reent+0x94>
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f000 f822 	bl	8004cd8 <_free_r>
 8004c94:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004c96:	b111      	cbz	r1, 8004c9e <_reclaim_reent+0x9e>
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f000 f81d 	bl	8004cd8 <_free_r>
 8004c9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004ca0:	b111      	cbz	r1, 8004ca8 <_reclaim_reent+0xa8>
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f000 f818 	bl	8004cd8 <_free_r>
 8004ca8:	6a23      	ldr	r3, [r4, #32]
 8004caa:	b11b      	cbz	r3, 8004cb4 <_reclaim_reent+0xb4>
 8004cac:	4620      	mov	r0, r4
 8004cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004cb2:	4718      	bx	r3
 8004cb4:	bd70      	pop	{r4, r5, r6, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000010 	.word	0x20000010

08004cbc <memcpy>:
 8004cbc:	440a      	add	r2, r1
 8004cbe:	4291      	cmp	r1, r2
 8004cc0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004cc4:	d100      	bne.n	8004cc8 <memcpy+0xc>
 8004cc6:	4770      	bx	lr
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cd2:	4291      	cmp	r1, r2
 8004cd4:	d1f9      	bne.n	8004cca <memcpy+0xe>
 8004cd6:	bd10      	pop	{r4, pc}

08004cd8 <_free_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4605      	mov	r5, r0
 8004cdc:	2900      	cmp	r1, #0
 8004cde:	d041      	beq.n	8004d64 <_free_r+0x8c>
 8004ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce4:	1f0c      	subs	r4, r1, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bfb8      	it	lt
 8004cea:	18e4      	addlt	r4, r4, r3
 8004cec:	f000 f83e 	bl	8004d6c <__malloc_lock>
 8004cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d68 <_free_r+0x90>)
 8004cf2:	6813      	ldr	r3, [r2, #0]
 8004cf4:	b933      	cbnz	r3, 8004d04 <_free_r+0x2c>
 8004cf6:	6063      	str	r3, [r4, #4]
 8004cf8:	6014      	str	r4, [r2, #0]
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d00:	f000 b83a 	b.w	8004d78 <__malloc_unlock>
 8004d04:	42a3      	cmp	r3, r4
 8004d06:	d908      	bls.n	8004d1a <_free_r+0x42>
 8004d08:	6820      	ldr	r0, [r4, #0]
 8004d0a:	1821      	adds	r1, r4, r0
 8004d0c:	428b      	cmp	r3, r1
 8004d0e:	bf01      	itttt	eq
 8004d10:	6819      	ldreq	r1, [r3, #0]
 8004d12:	685b      	ldreq	r3, [r3, #4]
 8004d14:	1809      	addeq	r1, r1, r0
 8004d16:	6021      	streq	r1, [r4, #0]
 8004d18:	e7ed      	b.n	8004cf6 <_free_r+0x1e>
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	b10b      	cbz	r3, 8004d24 <_free_r+0x4c>
 8004d20:	42a3      	cmp	r3, r4
 8004d22:	d9fa      	bls.n	8004d1a <_free_r+0x42>
 8004d24:	6811      	ldr	r1, [r2, #0]
 8004d26:	1850      	adds	r0, r2, r1
 8004d28:	42a0      	cmp	r0, r4
 8004d2a:	d10b      	bne.n	8004d44 <_free_r+0x6c>
 8004d2c:	6820      	ldr	r0, [r4, #0]
 8004d2e:	4401      	add	r1, r0
 8004d30:	1850      	adds	r0, r2, r1
 8004d32:	4283      	cmp	r3, r0
 8004d34:	6011      	str	r1, [r2, #0]
 8004d36:	d1e0      	bne.n	8004cfa <_free_r+0x22>
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	6053      	str	r3, [r2, #4]
 8004d3e:	4408      	add	r0, r1
 8004d40:	6010      	str	r0, [r2, #0]
 8004d42:	e7da      	b.n	8004cfa <_free_r+0x22>
 8004d44:	d902      	bls.n	8004d4c <_free_r+0x74>
 8004d46:	230c      	movs	r3, #12
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	e7d6      	b.n	8004cfa <_free_r+0x22>
 8004d4c:	6820      	ldr	r0, [r4, #0]
 8004d4e:	1821      	adds	r1, r4, r0
 8004d50:	428b      	cmp	r3, r1
 8004d52:	bf04      	itt	eq
 8004d54:	6819      	ldreq	r1, [r3, #0]
 8004d56:	685b      	ldreq	r3, [r3, #4]
 8004d58:	6063      	str	r3, [r4, #4]
 8004d5a:	bf04      	itt	eq
 8004d5c:	1809      	addeq	r1, r1, r0
 8004d5e:	6021      	streq	r1, [r4, #0]
 8004d60:	6054      	str	r4, [r2, #4]
 8004d62:	e7ca      	b.n	8004cfa <_free_r+0x22>
 8004d64:	bd38      	pop	{r3, r4, r5, pc}
 8004d66:	bf00      	nop
 8004d68:	20004250 	.word	0x20004250

08004d6c <__malloc_lock>:
 8004d6c:	4801      	ldr	r0, [pc, #4]	@ (8004d74 <__malloc_lock+0x8>)
 8004d6e:	f7ff bf45 	b.w	8004bfc <__retarget_lock_acquire_recursive>
 8004d72:	bf00      	nop
 8004d74:	2000424c 	.word	0x2000424c

08004d78 <__malloc_unlock>:
 8004d78:	4801      	ldr	r0, [pc, #4]	@ (8004d80 <__malloc_unlock+0x8>)
 8004d7a:	f7ff bf40 	b.w	8004bfe <__retarget_lock_release_recursive>
 8004d7e:	bf00      	nop
 8004d80:	2000424c 	.word	0x2000424c

08004d84 <_init>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	bf00      	nop
 8004d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8a:	bc08      	pop	{r3}
 8004d8c:	469e      	mov	lr, r3
 8004d8e:	4770      	bx	lr

08004d90 <_fini>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	bf00      	nop
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr
